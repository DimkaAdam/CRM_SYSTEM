# –ò–º–ø–æ—Ä—Ç –±–∞–∑–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
from django.db import models                     # –ø–æ–ª—è –∏ –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –º–æ–¥–µ–ª–∏
from django.utils.text import slugify            # –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è slug –∏–∑ name
from django.urls import reverse                  # –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è get_absolute_url
from django.contrib.auth.hashers import (        # –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è/–ø—Ä–æ–≤–µ—Ä–∫–∏ —Ö—ç—à–∞ –ø–∞—Ä–æ–ª—è
    make_password, check_password
)

class PortalCompany(models.Model):
    """
    –ö–æ–º–ø–∞–Ω–∏—è, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–∞—è –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º —ç–∫—Ä–∞–Ω–µ entry_portal.
    –î–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –æ–±—â–∏–π –ø–∞—Ä–æ–ª—å (shared_password), –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—É–¥—É—Ç –≤—Ö–æ–¥–∏—Ç—å –±–µ–∑ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.
    """

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –∫–æ–º–ø–∞–Ω–∏–∏
    name = models.CharField(
        max_length=100,
        unique=True,
        help_text="–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ."
    )

    # –ö–æ—Ä–æ—Ç–∫–∏–π –∫–ª—é—á (–¥–ª—è URL/—Å–µ—Å—Å–∏–∏), –Ω–∞–ø—Ä–∏–º–µ—Ä: local-to-global, pmb-depot
    slug = models.SlugField(
        max_length=100,
        unique=True,
        help_text="–ö–ª—é—á –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ (–ø—Ä–∏–º–µ—Ä: local-to-global)."
    )

    # –õ–æ–≥–æ—Ç–∏–ø (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω)
    logo = models.ImageField(
        upload_to="entry_portal_logos/",
        blank=True,
        null=True,
        help_text="–õ–æ–≥–æ—Ç–∏–ø –∫–æ–º–ø–∞–Ω–∏–∏."
    )

    # –ö—É–¥–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ (–º–æ–∂–Ω–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –ò–õ–ò –∞–±—Å–æ–ª—é—Ç–Ω—ã–π URL)
    # –ü—Ä–∏–º–µ—Ä—ã: "/crm/dashboard", "/scales/home", "https://example.com/app"
    redirect_url = models.CharField(
        max_length=255,
        blank=True,
        help_text="–ö—É–¥–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ (–ø—Ä–∏–º–µ—Ä: /crm/dashboard –∏–ª–∏ /scales/home)."
        # –í–∞–∂–Ω–æ: –ù–ï —Å—Ç–∞–≤–∏–º URLValidator, —á—Ç–æ–±—ã —Ä–∞–∑—Ä–µ—à–∏—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏!
    )

    # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (—á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–∫—Ä—ã–≤–∞—Ç—å)
    is_active = models.BooleanField(
        default=True,
        help_text="–ï—Å–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω–æ ‚Äî –∫–æ–º–ø–∞–Ω–∏—è –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ –≤—ã–±–æ—Ä–∞."
    )

    # –ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (–º–µ–Ω—å—à–µ ‚Äî –≤—ã—à–µ)
    order = models.PositiveIntegerField(
        default=0,
        help_text="–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ –≤—ã–±–æ—Ä–∞ (–º–µ–Ω—å—à–µ —á–∏—Å–ª–æ ‚Äî –≤—ã—à–µ)."
    )

    # üîê –•—ç—à –æ–±—â–µ–≥–æ –ø–∞—Ä–æ–ª—è –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —ç—Ç—É –∫–æ–º–ø–∞–Ω–∏—é (–±–µ–∑ –ª–æ–≥–∏–Ω–∞)
    # –•—Ä–∞–Ω–∏–º –¢–û–õ–¨–ö–û —Ö—ç—à! –°—ã—Ä–æ–π –ø–∞—Ä–æ–ª—å –Ω–∏–∫—É–¥–∞ –Ω–µ –ø–∏—à–µ–º.
    shared_password = models.CharField(
        max_length=255,
        blank=True,
        help_text="–•—ç—à –æ–±—â–µ–≥–æ –ø–∞—Ä–æ–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ (–∑–∞–¥–∞—ë—Ç—Å—è —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É/—Å–∫—Ä–∏–ø—Ç)."
    )

    # –¢–µ—Ö. –ø–æ–ª—è
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        verbose_name = "–ö–æ–º–ø–∞–Ω–∏—è –ø–æ—Ä—Ç–∞–ª–∞"
        verbose_name_plural = "–ö–æ–º–ø–∞–Ω–∏–∏ –ø–æ—Ä—Ç–∞–ª–∞"
        ordering = ["order", "name"]
        constraints = [
            models.CheckConstraint(
                check=~models.Q(slug=""),
                name="entryportal_slug_not_empty"
            ),
        ]

    def __str__(self):
        return f"{self.name} ({self.slug})"

    def save(self, *args, **kwargs):
        # –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è slug –∏–∑ name –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if not self.slug and self.name:
            self.slug = slugify(self.name)
        super().save(*args, **kwargs)

    def get_absolute_url(self):
        return reverse("entry_portal:company_detail", kwargs={"slug": self.slug})

    # –£–¥–æ–±–Ω—ã–µ —Ö–µ–ª–ø–µ—Ä—ã, –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å —Å—Ç–∞–≤–∏—Ç—å/–ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–∞—Ä–æ–ª—å –∏–∑ –∫–æ–¥–∞ (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    def set_shared_password(self, raw_password: str):
        """–ó–∞—Ö—ç—à–∏—Ä–æ–≤–∞—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—â–∏–π –ø–∞—Ä–æ–ª—å –∫–æ–º–ø–∞–Ω–∏–∏."""
        self.shared_password = make_password(raw_password)
        self.save(update_fields=["shared_password", "updated_at"])

    def check_shared_password(self, raw_password: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—ã—Ä–æ–π –ø–∞—Ä–æ–ª—å –ø—Ä–æ—Ç–∏–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Ö—ç—à–∞."""
        if not self.shared_password:
            return False
        return check_password(raw_password, self.shared_password)
