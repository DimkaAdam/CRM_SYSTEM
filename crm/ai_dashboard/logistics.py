# crm/ai_dashboard/logic/logistics.py

from decimal import Decimal, ROUND_HALF_UP

# üì¶ –†–∞—Å—á—ë—Ç –ª–æ–≥–∏—Å—Ç–∏–∫–∏ –∑–∞ 1 —Ç–æ–Ω–Ω—É –∏ –∑–∞ 1 —Ç—é–∫, —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏–º–∏ —Å–¥–µ–ª–∫–∞–º–∏

def analyze_logistics(deal, average_logistics=None):
    suggestions = []

    if not (deal.transport_cost and deal.shipped_quantity):
        return suggestions

    # üí∞ –õ–æ–≥–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–æ–Ω–Ω—É
    try:
        per_ton_cost = (deal.transport_cost / deal.shipped_quantity).quantize(Decimal('0.01'), rounding=ROUND_HALF_UP)
        suggestions.append(f"üöõ –õ–æ–≥–∏—Å—Ç–∏–∫–∞: {per_ton_cost} $/—Ç")
    except (ZeroDivisionError, TypeError):
        per_ton_cost = None

    # üì¶ –õ–æ–≥–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç—é–∫ (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—é–∫–æ–≤)
    if deal.shipped_pallets:
        try:
            per_bale_cost = (deal.transport_cost / deal.shipped_pallets).quantize(Decimal('0.01'), rounding=ROUND_HALF_UP)
            suggestions.append(f"üì¶ –õ–æ–≥–∏—Å—Ç–∏–∫–∞: {per_bale_cost} $/—Ç—é–∫")
        except (ZeroDivisionError, TypeError):
            pass

    # üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Å—Ä–µ–¥–Ω–µ–π –ª–æ–≥–∏—Å—Ç–∏–∫–æ–π (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞)
    if average_logistics and per_ton_cost:
        diff = per_ton_cost - average_logistics
        if diff > Decimal('20.00'):
            suggestions.append(f"‚ö†Ô∏è –õ–æ–≥–∏—Å—Ç–∏–∫–∞ –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π –Ω–∞ {diff} $/—Ç")
        elif diff < Decimal('-20.00'):
            suggestions.append(f"‚úÖ –õ–æ–≥–∏—Å—Ç–∏–∫–∞ –≤—ã–≥–æ–¥–Ω–µ–µ —Å—Ä–µ–¥–Ω–µ–π –Ω–∞ {-diff} $/—Ç")

    return suggestions
