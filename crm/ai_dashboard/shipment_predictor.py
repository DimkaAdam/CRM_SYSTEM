from crm.models import Deals
from collections import defaultdict
from datetime import timedelta, date
import statistics

def predict_shipments():
    supplier_deals = defaultdict(list)
    predictions = []


    # üîç –°–±–æ—Ä –≤—Å–µ—Ö —Å–¥–µ–ª–æ–∫ –ø–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º, —É–ø–æ—Ä—è–¥–æ—á–∏–º –ø–æ –¥–∞—Ç–µ
    for deal in Deals.objects.filter(supplier__isnull=False).exclude(date=None).order_by("date"):
        supplier_deals[deal.supplier].append(deal.date.date())  # date ‚Üí datetime.date

    for supplier, dates in supplier_deals.items():
        # üìÜ –£–¥–∞–ª–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ–º
        unique_dates = sorted(list(set(dates)))

        if len(unique_dates) < 3:
            continue  # –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö

        # üìà –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
        deltas = [
            (unique_dates[i] - unique_dates[i - 1]).days
            for i in range(1, len(unique_dates))
        ]
        avg_interval = round(statistics.mean(deltas))
        last_date = unique_dates[-1]
        predicted_date = last_date + timedelta(days=avg_interval)

        # üß™ –õ–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print(f"üì¶ {supplier.name}: Last = {last_date}, Avg = {avg_interval}d, Next = {predicted_date}")

        # üìÖ –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞—Ç–∞ –±–ª–∏–∑–∫–∞ (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 14 –¥–Ω–µ–π)
        if predicted_date <= date.today() + timedelta(days=14):
            predictions.append({
                "supplier": supplier.name,
                "last_date": last_date,
                "predicted_date": predicted_date,
                "avg_interval": avg_interval
            })

    predictions.sort(key=lambda x: x['predicted_date'])

    return predictions
