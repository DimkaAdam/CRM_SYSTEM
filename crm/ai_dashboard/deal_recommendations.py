# crm/ai_dashboard/deal_recommendations.py
from datetime import datetime
from ..models import Deals, ContactMaterial,TruckProfile
from django.db.models import F
from .transport import suggest_transport_adjustments
from math import ceil
from django.utils.timezone import make_aware

def analyze_deals():
    now = datetime.now()
    start_of_month = make_aware(datetime(now.year, now.month, 1))

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–¥–µ–ª–∫–∏ —ç—Ç–æ–≥–æ –º–µ—Å—è—Ü–∞ –∏ —É–±—ã—Ç–æ—á–Ω—ã–µ
    problem_deals = Deals.objects.filter(
        total_income_loss__lt=0,
        date__gte=start_of_month
    )
    recommendations = []

    for deal in problem_deals:
        rec = {
            "deal_id": deal.id,
            "company": deal.supplier.name if deal.supplier else "Unknown",
            "grade": deal.grade,
            "income_loss": round(deal.total_income_loss, 2),
            "shipped_quantity": deal.shipped_quantity,
            "bales": deal.shipped_pallets,
            "date": deal.date.strftime("%d.%m.%Y") if deal.date else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            "suggestions": []
        }

        # ‚ùóÔ∏è–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if not deal.shipped_quantity or not deal.received_quantity:
            rec["status"] = "error"
            rec["analysis"] = "‚ö†Ô∏è Hmm... shipped or received quantity is zero. Please double-check the data"
            rec["suggestions"].append("‚ö†Ô∏è –û–ø–ø–∞, Error in the calculation, check data.")
            recommendations.append(rec)
            continue

        # üí∞ –†–∞—Å—á—ë—Ç –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ–≥–æ –æ–±—ä—ë–º–∞ ‚Äî –µ—Å–ª–∏ –µ—Å—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ

        try:
            buyer_price = float(deal.buyer_price)
            supplier_price = float(deal.supplier_price)
            transport_cost = float(deal.transport_cost)
            shipped_quantity = float(deal.shipped_quantity)
            received_quantity = float(deal.received_quantity)

            # üí° –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–∏—ë–º–∫–∏ (waste ratio)
            if shipped_quantity == 0:
                raise ZeroDivisionError("shipped_quantity = 0")

            waste_ratio = received_quantity / shipped_quantity

            denominator = buyer_price - (supplier_price * waste_ratio)
            if denominator == 0:
                raise ZeroDivisionError("–î–µ–ª–µ–Ω–∏–µ –Ω–∞ 0 –≤ —Ä–∞—Å—á—ë—Ç–µ break-even")

            break_even_shipped_qty = round(transport_cost / denominator, 2)

            rec["suggestions"].append(
                f"üìà –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º {break_even_shipped_qty} —Ç–æ–Ω–Ω –¥–ª—è –≤—ã—Ö–æ–¥–∞ –≤ 0 (—É—á—Ç—ë–Ω –ø—Ä–∏—ë–º –ø–æ {round(waste_ratio * 100)}%)."
            )
        except ZeroDivisionError:
            rec["suggestions"].append("‚ö†Ô∏è –î–µ–ª–µ–Ω–∏–µ –Ω–∞ 0 –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ —Ç–æ—á–∫–∏ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏.")
        except Exception as e:
            rec["suggestions"].append(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ break-even: {str(e)}")

        # üì¶ 2. –ú–∞–ª–∞—è –æ—Ç–≥—Ä—É–∑–∫–∞ ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–∞—Ä–∂–∞ > 0
        truck = None
        if deal.transport_company:
            truck = TruckProfile.objects.filter(company=deal.transport_company).first()

        if truck:
            avg_bale_weight = get_avg_bale_weight(truck.company, deal.grade)
            if avg_bale_weight and avg_bale_weight < 250:
                max_stack = truck.max_spots * 2
            else:
                max_stack = truck.max_spots
            min_required_bales = max_stack - 2# üîß –º–æ–∂–Ω–æ +/- –º–µ–Ω—è—Ç—å –∫–∞–∫ —Ö–æ—á–µ—à—å
        else:
            min_required_bales = 6  # –¥–µ—Ñ–æ–ª—Ç –µ—Å–ª–∏ —Ç—Ä–∞–∫ –Ω–µ —É–∫–∞–∑–∞–Ω

        if deal.shipped_pallets and deal.shipped_pallets < min_required_bales:
            rec["suggestions"].append(
                f"üöõ –û—Ç–≥—Ä—É–∑–∫–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞—è ({deal.shipped_pallets} —Ç—é–∫–æ–≤). –ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ –º–∏–Ω–∏–º—É–º {min_required_bales} –ø–æ–¥ —Ç–µ–∫—É—â–∏–π —Ç—Ä–∞–∫."
            )
            # ‚ùóÔ∏è–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—á—ë—Ç break-even, –µ—Å–ª–∏ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –∞–Ω–∞–ª–∏–∑ –∏–∑-–∑–∞ –º–∞–ª–æ–π –æ—Ç–≥—Ä—É–∑–∫–∏
            if rec.get("status") != "skip":
                if deal.buyer_price and deal.supplier_price and deal.transport_cost:
                    try:
                        margin_per_ton = deal.buyer_price - deal.supplier_price - deal.transport_cost
                        if margin_per_ton > 0:
                            break_even_qty = round(-deal.total_income_loss / margin_per_ton, 2)
                            rec["suggestions"].append(
                                f"üìà –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º {break_even_qty} —Ç–æ–Ω–Ω –¥–ª—è –≤—ã—Ö–æ–¥–∞ –≤ 0."
                            )
                        else:
                            rec["suggestions"].append(
                                f"üìâ –ù–µ—Ç –Ω–∞—Ü–µ–Ω–∫–∏: –ø—Ä–æ–¥–∞–∂–∞ = ${deal.buyer_price}/—Ç, –∑–∞–∫—É–ø–∫–∞ = ${deal.supplier_price}/—Ç, "
                                f"–ª–æ–≥–∏—Å—Ç–∏–∫–∞ = ${deal.transport_cost} ‚Üí –∏—Ç–æ–≥–æ–≤–∞—è –º–∞—Ä–∂–∞ = ${round(margin_per_ton, 2)}/—Ç.\n"
                                f"üîª –£–±—ã—Ç–æ–∫ –Ω–µ–∏–∑–±–µ–∂–µ–Ω ‚Äî —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –æ–±—ä—ë–º–∞ –Ω–µ –ø–æ–º–æ–∂–µ—Ç."
                            )
                    except ZeroDivisionError:
                        rec["suggestions"].append("‚ö†Ô∏è –î–µ–ª–µ–Ω–∏–µ –Ω–∞ 0 –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏.")
                    except Exception as e:
                        rec["suggestions"].append(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ: {str(e)}")

            # üõë –ü—Ä–µ—Ä—ã–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à–∏–π –∞–Ω–∞–ª–∏–∑
            rec["status"] = "skip"
            rec["analysis"] = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç—é–∫–æ–≤ –ø–æ–¥ —ç—Ç–æ—Ç —Ç—Ä–∞–∫. –£–≤–µ–ª–∏—á—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –æ—Å—Ç–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏–∑ –Ω–µ–∞–∫—Ç—É–∞–ª–µ–Ω."
            recommendations.append(rec)
            continue

        # üöö 3. –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–∏—Å—Ç–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–∏–ª—è —Ç—Ä–∞–∫–æ–≤
        truck_result = suggest_truck_optimization(deal)

        if truck_result:
            rec["status"] = "better_truck"
            rec["analysis"] = "–ù–∞–π–¥–µ–Ω—ã –±–æ–ª–µ–µ –≤—ã–≥–æ–¥–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ª–æ–≥–∏—Å—Ç–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–∫–æ–≤."
            for suggestion in truck_result:
                rec["suggestions"].append("üöõ " + suggestion["message"])


        # üîÑ 4. –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –ø–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É
        other_suppliers = ContactMaterial.objects.filter(
            material=deal.grade
        ).exclude(contact__company=deal.supplier).order_by("price")[:1]

        if other_suppliers.exists():
            cheaper = other_suppliers[0]
            if cheaper.price < deal.supplier_price:
                delta = round(deal.supplier_price - cheaper.price, 2)
                rec["suggestions"].append(
                    f"üè∑ –ü–æ—Å—Ç–∞–≤—â–∏–∫ {cheaper.contact.company.name} –ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–µ—à–µ–≤–ª–µ –Ω–∞ ${delta}/—Ç–æ–Ω–Ω—É. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–∏–∑–∏—Ç—å —Ü–µ–Ω—É."
                )

        # üìä 5. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–∏—Å—Ç–∏–∫–∏
        transport_result = suggest_transport_adjustments(deal)
        rec["status"] = transport_result["status"]
        rec["analysis"] = transport_result["message"]

        for suggestion in transport_result["suggestions"]:
            rec["suggestions"].append("üîß " + suggestion["message"])

        recommendations.append(rec)

    return recommendations

from django.db.models import Avg, F, FloatField, ExpressionWrapper

def get_avg_bale_weight(company, grade):
    deals = Deals.objects.filter(
        transport_company=company,
        grade=grade,
        shipped_quantity__gt=0,
        shipped_pallets__gt=0
    ).annotate(
        bale_weight=ExpressionWrapper(
            F('shipped_quantity') * 1000 / F('shipped_pallets'),
            output_field=FloatField()
        )
    )
    avg = deals.aggregate(avg=Avg('bale_weight'))['avg']
    return round(avg, 2) if avg else None

import math
def suggest_truck_optimization(deal):
    suggestions = []

    if not (deal.shipped_quantity and deal.shipped_pallets and deal.transport_cost):
        return suggestions

    current_cost_per_ton = deal.transport_cost
    shipped_qty = float(deal.shipped_quantity)
    shipped_bales = int(deal.shipped_pallets)
    total_weight = shipped_qty * 1000  # –≤ –∫–≥

    trucks = TruckProfile.objects.all()
    cheaper_options = []

    for truck in trucks:
        if truck.base_cost == 0:
            continue

        bale_weight = get_avg_bale_weight(truck.company, deal.grade)  # ‚úÖ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
        if not bale_weight:
            continue

        max_tons = truck.max_tons
        max_spots = truck.max_spots

        # üëá –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–∂–Ω–æ –ª–∏ –¥–µ–ª–∞—Ç—å double stack
        if bale_weight < 250:
            stacking_allowed = True
            max_bales = min(
                math.floor((max_tons * 1000) / bale_weight),
                max_spots * 2
            )
        else:
            stacking_allowed = False
            max_bales = min(
                math.floor((max_tons * 1000) / bale_weight),
                max_spots
            )

        # üö´ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–µ –≤–ª–µ–∑–∞–µ—Ç –ø–æ –≤–µ—Å—É –∏–ª–∏ –∫–æ–ª-–≤—É –ø–∞–ª–µ—Ç
        if shipped_bales > max_bales or total_weight > max_tons * 1000:
            continue

        if shipped_bales < max_bales:
            needed_bales = max_bales
            needed_tons = round((bale_weight * max_bales) / 1000, 2)
            message = (
                f"‚è≥ –í—ã–≥–æ–¥–∞ –±—É–¥–µ—Ç –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ {truck.company.name}: "
                f"{needed_bales} —Ç—é–∫–æ–≤ / ~{needed_tons} —Ç–æ–Ω–Ω. "
                f"–¢–æ–≥–¥–∞ –ª–æ–≥–∏—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–∞–≤–∏—Ç ${round((truck.base_cost / needed_tons), 2)}/—Ç"
            )
            suggestions.append({
                "action": "wait_accumulate",
                "truck": truck.company.name,
                "needed_bales": needed_bales,
                "message": message
            })
            continue

        # ‚úÖ –°—á–∏—Ç–∞–µ–º –ª–æ–≥–∏—Å—Ç–∏–∫—É
        trips = ceil(shipped_bales / max_bales)
        total_logistics_cost = truck.base_cost * trips
        if shipped_qty == 0:
            continue  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ 0
        new_cost_per_ton = round(total_logistics_cost / shipped_qty, 2)

        if new_cost_per_ton < current_cost_per_ton:
            cheaper_options.append((truck, new_cost_per_ton, stacking_allowed))

    if cheaper_options:
        best_truck, best_price, stacking = sorted(cheaper_options, key=lambda x: x[1])[0]
        message = f"üöö –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è {best_truck.company.name} ‚Äî –ª–æ–≥–∏—Å—Ç–∏–∫–∞ ${best_price}/—Ç (–≤–º–µ—Å—Ç–æ ${current_cost_per_ton}/—Ç)"
        if stacking:
            message += " —Å double stack"
        suggestions.append({
            "action": "truck_swap",
            "truck": best_truck.company.name,
            "company": best_truck.company.name,
            "new_logistics_price": best_price,
            "message": message
        })

    return suggestions


from django.db.models import Sum, Count, F

def analyze_scale_ticket_groups():
    tickets = (
        Deals.objects
        .filter(scale_ticket__isnull=False)
        .values("scale_ticket")
        .annotate(
            total_deals=Count("id"),
            total_amount=Sum("buyer_price" * F("shipped_quantity")),
            supplier_total=Sum("supplier_price" * F("received_quantity")),
            total_transport=Sum("transport_cost"),
            total_shipped=Sum("shipped_quantity"),
            total_bales=Sum("shipped_pallets")
        )
    )

    insights = []

    for t in tickets:
        income = (t["total_amount"] or 0) - (t["supplier_total"] or 0) - (t["total_transport"] or 0)
        if income >= 0:
            continue

        ticket_deals = Deals.objects.filter(scale_ticket=t["scale_ticket"])
        transport_company = ticket_deals.first().transport_company if ticket_deals.exists() else None

        insight = {
            "scale_ticket": t["scale_ticket"],
            "total_deals": t["total_deals"],
            "shipped_tons": round(t["total_shipped"], 2) if t["total_shipped"] else 0,
            "bales": t["total_bales"] or 0,
            "income_loss": round(income, 2),
            "suggestions": []
        }

        # üí° –ú–∞–ª–∞—è —Å—É–º–º–∞—Ä–Ω–∞—è –æ—Ç–≥—Ä—É–∑–∫–∞
        if insight["bales"] < 6:
            insight["suggestions"].append(
                f"üì¶ –û–±—â–∞—è –æ—Ç–≥—Ä—É–∑–∫–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞—è: {insight['bales']} —Ç—é–∫–æ–≤. –ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ >= 6."
            )

        # üöö –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –ø–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É
        if transport_company:
            fake_deal = ticket_deals.first()
            fake_deal.shipped_quantity = t["total_shipped"]
            fake_deal.shipped_pallets = t["total_bales"]
            truck_suggestions = suggest_truck_optimization(fake_deal)

            if truck_suggestions:
                for s in truck_suggestions:
                    insight["suggestions"].append("üöõ " + s["message"])
            else:
                insight["suggestions"].append(
                    f"üí° –ù–µ—Ç –±–æ–ª–µ–µ –≤—ã–≥–æ–¥–Ω–æ–≥–æ —Ç—Ä–∞–∫–∞, —á–µ–º {transport_company.name}."
                )

        insights.append(insight)

    return insights