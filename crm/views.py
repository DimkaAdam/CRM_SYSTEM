from django.core.serializers import serialize
import os
from .models import Client, Deals, Task, PipeLine, CompanyPallets, Company, Contact, Employee, ContactMaterial,ScheduledShipment,SCaleTicketStatus,TruckProfile


from datetime import datetime, date, time, timedelta
from decimal import Decimal
from django.utils import timezone
from django.db.models import Sum, Count, F, DecimalField, ExpressionWrapper,Value
from django.db.models.functions import Coalesce

from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status, viewsets
from rest_framework.decorators import action
from .forms import TaskForm
from .serializers import ClientSerializer,DealSerializer,PipeLineSerializer

from .forms import ContactForm, CompanyForm, ContactMaterialForm, DealForm
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from django.shortcuts import render, redirect, get_object_or_404
from django.db.models import Sum
from django.http import JsonResponse
from django.http import HttpResponse
from django.db.models.functions import ExtractYear, ExtractMonth
from django.utils.translation import gettext_lazy as _
from django.conf import settings
from django.views.decorators.csrf import csrf_exempt
from django.http import HttpResponseRedirect
from django.db.models import Q
from openpyxl import Workbook
from openpyxl.styles import Font, PatternFill, Alignment
from django.views.decorators.http import require_POST
import json


from datetime import datetime,timezone,timedelta
from django.utils import timezone as t
from io import BytesIO

from reportlab.lib import colors
from reportlab.platypus import Table, TableStyle
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter
from reportlab.lib.units import inch
from reportlab.lib.utils import ImageReader
from .google_calendar import get_calendar_events
import glob

from django.utils.timezone import make_aware
from django.db.models import Sum, Count, F

from .models import Event

import re

def sanitize_filename(name):
    name = name.strip()
    name = name.replace(' ', '_')
    return re.sub(r'[<>:"/\\|?*]', '_', name)



from django.conf import settings
print("üì¶ Current database path:", settings.DATABASES['default']['NAME'])


def index(request):
    return render(request, 'crm/index.html')


def client_list(request):
    clients = Client.objects.all()

    supplier = clients.filter(client_type='suppliers')
    buyer = clients.filter(client_type='buyers')
    hauler = clients.filter(client_type='hauler')
    return render(request, 'crm/client_list.html', {
        'clients': clients,
        'suppliers': supplier,
        'buyers': buyer,
        'hauler': hauler,
    })


def company_list(request):
    companies = Company.objects.all()
    return render(request, 'crm/company_ main.html', {'companies': companies})


def add_company(request):
    if request.method == 'POST':
        name = request.POST.get('name')
        if name:
            company = Company.objects.create(name=name)
            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
            return redirect('add_contact', company_id=company.id)

    return render(request, 'crm/add_company.html')

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏

def company_detail(request, company_id):
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ id
    company = get_object_or_404(Company, id=company_id)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
    contacts = company.contacts.all()

    return render(request, 'crm/company_detail.html', {
        'company': company,
        'contacts': contacts,
    })

def edit_company(request, company_id):
    company = get_object_or_404(Company, id=company_id)
    if request.method == 'POST':
        form = CompanyForm(request.POST, instance=company)
        if form.is_valid():
            form.save()
            return redirect('company_detail', company_id=company.id)
    else:
        form = CompanyForm(instance=company)
    return render(request, 'crm/edit_company.html', {'form': form, 'company': company})

def delete_company(request, company_id):
    company = get_object_or_404(Company, id=company_id)
    if request.method == 'POST':
        company.delete()
        return redirect('company_list')  # –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π
    return render(request, 'crm/delete_company.html', {'company': company})


# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
def edit_contact(request, contact_id):
    contact = get_object_or_404(Contact, id=contact_id)

    if request.method == 'POST':
        form = ContactForm(request.POST, instance=contact)
        if form.is_valid():
            form.save()
            return redirect('company_list')  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π
    else:
        form = ContactForm(instance=contact)

    return render(request, 'crm/edit_contact.html', {'form': form, 'contact': contact})


# –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
def delete_contact(request, contact_id):
    contact = get_object_or_404(Contact, id=contact_id)

    # –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
    contact.delete()

    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π
    return redirect('Contacts')  # –£–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π

def view_contact(request, id):
    contact = get_object_or_404(Contact, id=id)
    pipeline, _ = PipeLine.objects.get_or_create(contact=contact)

    if request.method == "POST":
        # üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —Å—Ç–∞–¥–∏–∏
        if "change_stage" in request.POST:
            stage = request.POST.get("stage")
            pipeline.stage = stage
            pipeline.save()

        # üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
        form = ContactForm(request.POST, instance=contact)
        if form.is_valid():
            form.save()

            # üü° –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ–∫–±–æ–∫—Å
            pickup_requested = request.POST.get("pickup_requested") == "on"
            contact.company.pickup_requested = pickup_requested
            contact.company.save()

        return redirect("view_contact", id=contact.id)

    else:
        form = ContactForm(instance=contact)

    employees = contact.employees.all()
    trucks = TruckProfile.objects.filter(company=contact.company)

    return render(request, 'crm/view_contact.html', {
        'contact': contact,
        'form': form,
        'employees': employees,
        'pipeline': pipeline,
        'company': contact.company,
        'trucks': trucks,
    })


@csrf_exempt
def toggle_pickup(request, id):
    if request.method == "POST":
        import json
        company = get_object_or_404(Company, id=id)
        data = json.loads(request.body)
        company.pickup_requested = data.get('pickup_requested', False)
        company.save()
        return JsonResponse({"status": "ok"})
    return JsonResponse({"status": "error"}, status=400)

def manage_employees(request, company_id):
    company = get_object_or_404(Company, id=company_id)
    contacts = company.contacts.all()

    if request.method == 'POST':
        contact_id = request.POST.get('contact_id')
        contact = get_object_or_404(Contact, id=contact_id)

        name = request.POST.get('name')
        email = request.POST.get('email')
        phone = request.POST.get('phone')
        position = request.POST.get('position')

        Employee.objects.create(
            contact=contact,
            name=name,
            email=email,
            phone=phone,
            position=position
        )

        return redirect('manage_employees', company_id=company.id)

    return render(request, 'crm/manage_employees.html', {'company': company, 'contacts': contacts})

def edit_employee(request, employee_id):
    employee = get_object_or_404(Employee, id=employee_id)

    if request.method == 'POST':
        employee.name = request.POST.get('name')
        employee.email = request.POST.get('email')
        employee.phone = request.POST.get('phone')
        employee.position = request.POST.get('position')
        employee.save()
        return redirect('view_contact', id=employee.contact.id)

    return render(request, 'crm/edit_employee.html', {'employee': employee})


def get_employees(request, company_id):
    company = get_object_or_404(Company, id=company_id)
    employees = Employee.objects.filter(contact__company=company)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
    employees_data = [
        {
            'name': employee.name,
            'email': employee.email,
            'phone': employee.phone,
            'position': employee.position,
        }
        for employee in employees
    ]

    return JsonResponse({'employees': employees_data})


def contacts_view(request):
    companies = Company.objects.prefetch_related('contacts').all()
    return render(request, 'crm/contacts_list.html', {'companies': companies})


def add_employee(request, contact_id):
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ id
    contact = get_object_or_404(Contact, id=contact_id)

    if request.method == 'POST':
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
        name = request.POST.get('name')
        email = request.POST.get('email')
        phone = request.POST.get('phone')
        position = request.POST.get('position')

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        Employee.objects.create(
            contact=contact,
            name=name,
            email=email,
            phone=phone,
            position=position
        )

        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        return redirect('contacts_list')

    return render(request, 'crm/add_employee.html', {'contact': contact})

def delete_employee(request, employee_id):
    employee = get_object_or_404(Employee, id=employee_id)
    if request.method == 'POST':
        employee.delete()
        return redirect('contacts_list')


def load_employees(request, contact_id):
    contact = get_object_or_404(Contact, id=contact_id)
    employees = contact.employees.all()
    return render(request, 'employees.html', {'contact': contact, 'employees': employees})


def add_contact(request, company_id):
    company = get_object_or_404(Company, id=company_id)

    if request.method == 'POST':
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
        address = request.POST.get('address')
        company_type = request.POST.get('company_type')

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç —Å –∞–¥—Ä–µ—Å–æ–º –∏ —Ç–∏–ø–æ–º –∫–æ–º–ø–∞–Ω–∏–∏
        Contact.objects.create(
            company=company,
            address=address,
            company_type=company_type
        )

        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–æ–º–ø–∞–Ω–∏–∏
        return redirect('company_detail', company_id=company.id)

    return render(request, 'crm/add_contact.html', {'company': company})

def company_main(request):
    companies = Company.objects.all()
    return render(request, 'crm/company_main.html', {'companies': companies})

# DEALS
def deal_list(request):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∏ –≥–æ–¥
    print("DEBUG: datetime is", datetime)
    today_date = datetime.today()
    companies = Company.objects.all()
    current_month = today_date.month
    current_year = today_date.year

    # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
    deals = Deals.objects.all()

    # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ —Ç–∏–ø—É —á–µ—Ä–µ–∑ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
    suppliers = Company.objects.filter(contacts__company_type="suppliers").distinct()  # –¢–æ–ª—å–∫–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏
    buyers = Company.objects.filter(contacts__company_type="buyers").distinct()  # –¢–æ–ª—å–∫–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏
    hauler = Company.objects.filter(contacts__company_type="hauler").distinct() # Only Haulers

    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    month = request.GET.get('month', str(current_month).zfill(2))  # –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    year = request.GET.get('year', str(current_year))  # –¢–µ–∫—É—â–∏–π –≥–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    selected_company_id = request.GET.get('company')

    if selected_company_id:
        deals = deals.filter(
            Q(supplier__id=selected_company_id) |
            Q(buyer__id=selected_company_id) |
            Q(transport_company__id=selected_company_id)
        )

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–µ—Å—è—Ü –∏ –≥–æ–¥ —É–∫–∞–∑–∞–Ω—ã
    if month and year:
        deals = deals.filter(date__month=int(month), date__year=int(year))
    elif month:  # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ç–æ–ª—å–∫–æ –º–µ—Å—è—Ü
        deals = deals.filter(date__month=int(month))
    elif year:  # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ç–æ–ª—å–∫–æ –≥–æ–¥
        deals = deals.filter(date__year=int(year))

    # –ü–æ–¥—Å—á—ë—Ç –∏—Ç–æ–≥–æ–≤ –ø–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–¥–µ–ª–∫–∞–º
    totals = deals.aggregate(
        total_income_loss=Sum('total_income_loss'),
        total_amount=Sum('total_amount'),
        total_tonnage =Sum('received_quantity')
    )

    per_grade = (
        deals.values('grade')
        .annotate(
            shipped_weight=Coalesce(
                Sum('received_quantity', output_field=DecimalField(max_digits=18, decimal_places=2)),
                Value(0, output_field=DecimalField(max_digits=18, decimal_places=2))
            ),
            total_cash=Coalesce(
                Sum('total_amount', output_field=DecimalField(max_digits=18, decimal_places=2)),
                Value(0, output_field=DecimalField(max_digits=18, decimal_places=2))
            ),
        )
        .order_by('grade')
    )

    for row in per_grade:
        row["display"] = f"{row['grade']} ‚Äì {row['shipped_weight']:.2f} MT ({row['total_cash']:.2f} $)"




    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–¥–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    years = Deals.objects.annotate(year=ExtractYear('date')).values_list('year', flat=True).distinct()

    # –°–ø–∏—Å–æ–∫ –º–µ—Å—è—Ü–µ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –ø—É—Å—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è "–í—Å–µ")
    months = range(1, 13)  # –ú–µ—Å—è—Ü—ã —Å 1 –ø–æ 12

    month_names = {
        '01': _('January'),
        '02': _('February'),
        '03': _('March'),
        '04': _('April'),
        '05': _('May'),
        '06': _('June'),
        '07': _('July'),
        '08': _('August'),
        '09': _('September'),
        '10': _('October'),
        '11': _('November'),
        '12': _('December'),
    }

    form = DealForm()

    # –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —à–∞–±–ª–æ–Ω–∞
    context = {
        'deals': deals,
        'suppliers': suppliers,  # –¢–æ–ª—å–∫–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏
        'buyers': buyers,  # –¢–æ–ª—å–∫–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        'month': month,
        'year': year,
        'totals': totals,
        'years': sorted(years),  # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ª–µ—Ç –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        'month_names': month_names,
        'months': months,  # –ú–µ—Å—è—Ü—ã –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
        'setting': settings,
        'form': form,
        'hauler': hauler,
        'selected_company_id': int(selected_company_id) if selected_company_id else None,
        'companies': companies,
        'per_grade': per_grade,
    }

    # –†–µ–Ω–¥–µ—Ä–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    return render(request, 'crm/deal_list.html', context)


from .models import ContactMaterial

def get_price_by_supplier_and_grade(request):
    supplier_id = request.GET.get('supplier_id')
    grade = request.GET.get('grade')

    try:
        contact_material = ContactMaterial.objects.get(contact__company__id=supplier_id, material=grade)
        return JsonResponse({'price': str(contact_material.price)})
    except ContactMaterial.DoesNotExist:
        return JsonResponse({'price': None})


def get_price_by_buyer_and_grade(request):
    buyer_id = request.GET.get('buyer_id')
    grade = request.GET.get('grade')

    try:
        contact_material = ContactMaterial.objects.get(contact__company__id=buyer_id, material=grade)
        return JsonResponse({'price': str(contact_material.price)})
    except ContactMaterial.DoesNotExist:
        return JsonResponse({'price': None})


def export_deals_to_excel(request):
    from openpyxl.utils import get_column_letter
    from openpyxl.styles import Border, Side

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∏ –≥–æ–¥
    from django.utils.timezone import now

    month = request.GET.get('month')
    year = request.GET.get('year')

    if not month or not year:
        current_date = now()
        month = current_date.month
        year = current_date.year
    else:
        month = int(month)
        year = int(year)

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–∏–≥—É Excel
    wb = Workbook()
    ws = wb.active
    ws.title = "Deals"

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    header_font = Font(name="Arial", bold=True, color="FFFFFF")  # –ë–µ–ª—ã–π –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
    header_fill = PatternFill(start_color="87CEEB", end_color="87CEEB", fill_type="solid")  # –°–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π —Ñ–æ–Ω
    header_alignment = Alignment(horizontal="center", vertical="center")  # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    thin_border = Border(left=Side(style="thin"), right=Side(style="thin"), top=Side(style="thin"), bottom=Side(style="thin"))

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
    headers = [
        'Date', 'Supplier', 'Buyer', 'Grade', 'Shipped Qty', 'Pallets',
        'Received Qty', 'Pallets', 'Supplier Price', 'Supplier Paid Amount', 'Buyer Price',
        'Total Amount', 'Transport Cost', 'Hauler', 'Income/Loss','Scale Ticket'
    ]
    ws.append(headers)

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∫ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
    for col_num, header in enumerate(headers, 1):
        cell = ws.cell(row=1, column=col_num)
        cell.font = header_font
        cell.fill = header_fill
        cell.alignment = header_alignment
        cell.border = thin_border

    # –ü–æ–ª—É—á–∞–µ–º —Å–¥–µ–ª–∫–∏ —Ç–æ–ª—å–∫–æ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    deals = Deals.objects.select_related('supplier', 'buyer').filter(
        date__year=year,
        date__month=month
    )

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∫ –¥–∞–Ω–Ω—ã–º
    data_fill_light = PatternFill(start_color="F8F8F8", end_color="F8F8F8", fill_type="solid")  # –°–≤–µ—Ç–ª—ã–π —Ñ–æ–Ω –¥–ª—è —á–µ—Ç–Ω—ã—Ö —Å—Ç—Ä–æ–∫
    data_fill_dark = PatternFill(start_color="E6E6E6", end_color="E6E6E6", fill_type="solid")  # –¢–µ–º–Ω—ã–π —Ñ–æ–Ω –¥–ª—è –Ω–µ—á–µ—Ç–Ω—ã—Ö —Å—Ç—Ä–æ–∫
    data_font = Font(name="Arial", size=11)  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç –¥–ª—è –¥–∞–Ω–Ω—ã—Ö

    last_row = len(deals) + 1  # –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö

    for row_num, deal in enumerate(deals, start=2):
        formatted_date = deal.date.strftime('%d-%b') if deal.date else ''

        grade_value = deal.grade
        if grade_value == 'Baled Cardboard':
            grade_value = 'OCC 11'


        row = [
            formatted_date,
            deal.supplier.name if deal.supplier else '',
            deal.buyer.name if deal.buyer else '',
            grade_value,
            deal.shipped_quantity,
            deal.shipped_pallets,
            deal.received_quantity,
            deal.received_pallets,
            deal.supplier_price,
            deal.supplier_total,
            deal.buyer_price,
            deal.total_amount,
            deal.transport_cost,
            deal.transport_company.name if deal.transport_company else '',
            deal.total_income_loss,
            deal.scale_ticket,
        ]

        ws.append(row)



        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∫ —Å—Ç—Ä–æ–∫–µ –¥–∞–Ω–Ω—ã—Ö
        for col_num, value in enumerate(row, 1):
            cell = ws.cell(row=row_num, column=col_num)
            cell.font = data_font
            cell.border = thin_border
            cell.fill = data_fill_light if row_num % 2 == 0 else data_fill_dark

    # –ù–∞—á–∞–ª–æ —Å–≤–æ–¥–Ω–æ–π —Å–µ–∫—Ü–∏–∏ —Å–ø—Ä–∞–≤–∞ –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
    summary_col_start = len(headers) + 2  # –ü–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ —Å–ø—Ä–∞–≤–∞ –æ—Ç —Ç–∞–±–ª–∏—Ü—ã
    summary_data = [
        ("TOTAL SALE", "=SUM(L2:L{})".format(len(deals) + 1)),  # –û–±—â–∞—è –ø—Ä–æ–¥–∞–∂–∞ (Total Amount)
        ("# of pallets", "=SUM(F2:F{})".format(len(deals) + 1)),  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–ª–ª–µ—Ç
        ("Transportation cost", "=SUM(M2:M{})".format(len(deals) + 1)),  # –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã
        ("Suppliers", "=SUM(J2:J{})".format(len(deals) + 1)),  # –ò—Ç–æ–≥–∏ –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
        ("MT OCC11",
         "=SUMPRODUCT((D2:D{0}=\"OCC11\")+(D2:D{0}=\"OCC 11\")+(D2:D{0}=\"OCC 11 Bale String\")+"
         "(D2:D{0}=\"Loose OCC\")+(D2:D{0}=\"Stock Rolls\")+(D2:D{0}=\"Printers Offcuts\"), E2:E{0})".format(
             last_row
         )),
        ("MT Plastic", "=SUMIF(D2:D{}, \"Flexible Plastic\", E2:E{})".format(last_row, last_row)),
        ("MT Mixed-containers", "=SUMIF(D2:D{}, \"Mixed Container\", E2:E{})".format(last_row, last_row)),
        ("INCOME", "=SUM(O2:O{})".format(last_row))
    ]

    # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–≤–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    for row_num, (label, value) in enumerate(summary_data, start=2):
        label_cell = ws.cell(row=row_num, column=summary_col_start)
        label_cell.value = label
        label_cell.font = Font(bold=True, name="Arial", size=12)
        label_cell.alignment = Alignment(horizontal="right")

        value_cell = ws.cell(row=row_num, column=summary_col_start + 1)
        value_cell.value = value
        value_cell.border = thin_border
        value_cell.font = Font(name="Arial", size=11)

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥–≥–æ–Ω–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
    for col in ws.columns:
        max_length = 0
        column = get_column_letter(col[0].column)
        for cell in col:
            try:
                if cell.value:
                    max_length = max(max_length, len(str(cell.value)))
            except Exception:
                pass
        adjusted_width = max_length + 2
        ws.column_dimensions[column].width = adjusted_width

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    response = HttpResponse(content_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
    response['Content-Disposition'] = f'attachment; filename=deals_{year}_{month}.xlsx'
    wb.save(response)
    return response


def get_deal_details(request, deal_id):
    deal = get_object_or_404(Deals, id=deal_id)

    return JsonResponse({
        'id': deal.id,
        'date': deal.date.strftime('%Y-%m-%d'),

        'supplier_id': deal.supplier.id if deal.supplier else None,
        'supplier_name': deal.supplier.name if deal.supplier else "",

        'buyer_id': deal.buyer.id if deal.buyer else None,
        'buyer_name': deal.buyer.name if deal.buyer else "",

        'grade': deal.grade,
        'shipped_quantity': deal.shipped_quantity,
        'shipped_pallets': deal.shipped_pallets,
        'received_quantity': deal.received_quantity,
        'received_pallets': deal.received_pallets,
        'supplier_price': deal.supplier_price,
        'buyer_price': deal.buyer_price,
        'total_amount': deal.total_amount,

        'transport_cost': deal.transport_cost,
        'transport_company_id': deal.transport_company.id if deal.transport_company else None,
        'transport_company_name': deal.transport_company.name if deal.transport_company else "",

        'scale_ticket': deal.scale_ticket,
    })


@csrf_exempt
def edit_deal(request, deal_id):
    deal = get_object_or_404(Deals, id=deal_id)

    if request.method == 'POST':
        data = json.loads(request.body)

        supplier_id = data.get('supplier')
        buyer_id = data.get('buyer')

        if supplier_id:
            deal.supplier = get_object_or_404(Company, id=supplier_id)
        if buyer_id:
            deal.buyer = get_object_or_404(Company, id=buyer_id)

        # –ß–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–∫ Decimal
        deal.shipped_quantity = Decimal(data.get('shipped_quantity', deal.shipped_quantity))
        deal.received_quantity = Decimal(data.get('received_quantity', deal.received_quantity))
        deal.buyer_price = Decimal(data.get('buyer_price', deal.buyer_price))
        deal.supplier_price = Decimal(data.get('supplier_price', deal.supplier_price))
        deal.shipped_pallets = Decimal(data.get('shipped_pallets', deal.shipped_pallets))
        deal.received_pallets = Decimal(data.get('received_pallets', deal.received_pallets))
        deal.transport_cost = Decimal(data.get('transport_cost', deal.transport_cost))

        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
        deal.date = data.get('date', deal.date)
        deal.grade = data.get('grade', deal.grade)

        transport_company_id = data.get('transport_company')
        if transport_company_id:
            deal.transport_company = get_object_or_404(Company, id=transport_company_id)

        deal.scale_ticket = data.get('scale_ticket', deal.scale_ticket)

        # –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–∞—Å—á—ë—Ç—ã
        deal.total_amount = deal.shipped_quantity * deal.buyer_price
        deal.supplier_total = deal.received_quantity * deal.supplier_price
        deal.total_income_loss = deal.total_amount - (deal.supplier_total + deal.transport_cost)

        deal.save()

        return JsonResponse({
            'status': 'success',
            'deal': {
                'id': deal.id,
                'date': deal.date,
                'supplier': deal.supplier.name,
                'buyer': deal.buyer.name if deal.buyer else '',
                'grade': deal.grade,
                'total_amount': str(deal.total_amount),
                'total_income_loss': str(deal.total_income_loss),
                'scale_ticket': deal.scale_ticket
            }
        })

    return JsonResponse({'error': 'Invalid request method'}, status=400)

@csrf_exempt
def delete_deal(request, deal_id):
    if request.method == 'DELETE':
        deal = get_object_or_404(Deals, id=deal_id)
        deal.delete()
        return JsonResponse({'message': 'Deal deleted successfully!'})
    return HttpResponse(status=405)  # Method not allowed


class ClientCreateAPIView(APIView):
    def post(self, request):
        serializer = ClientSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


class ClientViewSet(viewsets.ModelViewSet):
    queryset = Client.objects.all()
    serializer_class = ClientSerializer


class DealCreateAPIView(APIView):
    def post(self, request):
        serializer = DealSerializer(data=request.data)
        if serializer.is_valid():
            scale_ticket = request.data.get("scale_ticket")  # ‚úÖ –ë–µ—Ä–µ–º scale_ticket

            # ‚úÖ –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç, –ø–µ—Ä–µ–¥–∞–≤–∞—è scale_ticket
            deal = serializer.save(scale_ticket=scale_ticket)

            return Response(DealSerializer(deal).data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


class DealViewSet(viewsets.ModelViewSet):
    queryset = Deals.objects.all()
    serializer_class = DealSerializer


def get_licence_plates(request):
    plates = [
        'SY1341',
        'WB3291',
        '153'
    ]
    return JsonResponse({"plates": plates})


SCALE_TICKET_COUNTER_FILE = os.path.join(settings.BASE_DIR, 'scale_ticket_counter.json')



@csrf_exempt
def get_scale_ticket_counters(request):


    if request.method == 'GET':
        if not os.path.exists(SCALE_TICKET_COUNTER_FILE):
            with open(SCALE_TICKET_COUNTER_FILE, 'w') as f:
                json.dump({"scale_ticket": 108346}, f)


        with open(SCALE_TICKET_COUNTER_FILE, 'r') as f:
            data = json.load(f)
        return JsonResponse(data)

    return JsonResponse({"error": "Invalid request"}, status=400)


@csrf_exempt
def increment_scale_ticket_counters(request):
    if request.method == 'POST':
        # ‚úÖ –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞—ë–º –µ–≥–æ —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        if not os.path.exists(SCALE_TICKET_COUNTER_FILE):
            with open(SCALE_TICKET_COUNTER_FILE, 'w') as f:
                json.dump({"bol": 1000, "load": 2000}, f)

        # ‚úÖ –ß–∏—Ç–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º
        with open(SCALE_TICKET_COUNTER_FILE, 'r+') as f:
            data = json.load(f)
            data["scale_ticket"] += 1
            f.seek(0)
            json.dump(data, f, indent=2)
            f.truncate()

        return JsonResponse({"status": "updated", "scale_ticket": data["scale_ticket"]})
    else:
        return JsonResponse({"error": "Invalid request"}, status=400)




def sales_analytics(request):
    from django.db.models import Sum, Q
    from django.db.models.functions import ExtractMonth, ExtractYear
    from django.http import JsonResponse, HttpResponseRedirect
    from datetime import datetime

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∏ –≥–æ–¥
    now = datetime.now()
    current_month = now.month
    current_year = now.year

    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    month = request.GET.get('month', str(current_month).zfill(2))  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    year = request.GET.get('year', str(current_year))               # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∏–π –≥–æ–¥

    # --- –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º (—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –ø–æ –≥–æ–¥—É) ---
    deals_year = Deals.objects.filter(date__year=int(year))
    monthly_data = deals_year.values(month=ExtractMonth('date')).annotate(
        total_income=Sum('total_income_loss'),
        total_pallets=Sum('shipped_pallets'),
        transport_cost=Sum('transport_cost'),
        supplier_total=Sum('supplier_total'),
        total_tonnage=Sum('shipped_quantity'),
        occ11_tonnage=Sum(
            'shipped_quantity',
            filter=(
                    Q(grade="OCC11") |
                    Q(grade="OCC 11") |
                    Q(grade="OCC 11 Bale String") |
                    Q(grade="Loose OCC") |
                    Q(grade="Printers Offcuts") |
                    Q(grade="Stock Rolls") |
                    Q(grade="Cardboard Stock Lots") |
                    Q(grade="DLK") |
                    Q(grade='Baled Cardboard')
            )
        ),

        plastic_tonnage=Sum('received_quantity', filter=Q(grade="Flexible Plastic")),
            mixed_tonnage=Sum('received_quantity', filter=Q(grade="Mixed Container")),
            total_sales=Sum('total_amount')
        ).order_by('month')

    chart_data = {
        'months': [entry['month'] for entry in monthly_data],
        'profit': [float(entry["total_income"] or 0) for entry in monthly_data],
        'pallets': [float(entry['total_pallets'] or 0) for entry in monthly_data],
        'hauler': [float(entry['transport_cost'] or 0) for entry in monthly_data],
        'suppliers': [float(entry["supplier_total"] or 0) for entry in monthly_data],
        'total_tonnage': [float(entry["total_tonnage"] or 0) for entry in monthly_data],
        'occ11_tonnage': [float(entry["occ11_tonnage"] or 0) for entry in monthly_data],
        'plastic_tonnage': [float(entry["plastic_tonnage"] or 0) for entry in monthly_data],
        'mixed_tonnage': [float(entry["mixed_tonnage"] or 0) for entry in monthly_data],
        'sales': [float(entry["total_sales"] or 0) for entry in monthly_data]
    }

    # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å AJAX, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ JSON
    if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
        return JsonResponse(chart_data)

    # --- –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫ (—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü—É –∏ –≥–æ–¥—É) ---
    deals_details = Deals.objects.all()
    if month and year:
        deals_details = deals_details.filter(date__month=int(month), date__year=int(year))
    elif month:
        deals_details = deals_details.filter(date__month=int(month))
    elif year:
        deals_details = deals_details.filter(date__year=int(year))

    suppliers_income = deals_details.values('supplier').annotate(total_income_loss=Sum('total_income_loss'))
    suppliers_income_dict = {
        contact.company.name: float(entry['total_income_loss'] or 0)
        for entry in suppliers_income
        for contact in Contact.objects.filter(company__id=entry['supplier'])
    }

    occ11_filter = Q(grade__iexact="OCC11") | Q(grade__iexact="OCC 11") | Q(grade__iexact="Loose OCC") | \
                   Q(grade__iexact="OCC 11 Bale String") | Q(grade__iexact="Printers Offcuts") | Q(
        grade__iexact="Stock Rolls")

    total_deals = deals_details.count()
    total_sale = deals_details.aggregate(Sum('total_amount'))['total_amount__sum'] or 0
    total_pallets = deals_details.aggregate(Sum('shipped_pallets'))['shipped_pallets__sum'] or 0
    transportation_fee = deals_details.aggregate(Sum('transport_cost'))['transport_cost__sum'] or 0
    suppliers_total = deals_details.aggregate(Sum('supplier_total'))['supplier_total__sum'] or 0
    mt_occ11 = deals_details.filter(occ11_filter).aggregate(Sum('received_quantity'))['received_quantity__sum'] or 0
    mt_plastic = deals_details.filter(grade="Flexible Plastic").aggregate(Sum('received_quantity'))['received_quantity__sum'] or 0
    mt_mixed_containers = deals_details.filter(grade="Mixed Container").aggregate(Sum('received_quantity'))['received_quantity__sum'] or 0
    income = deals_details.aggregate(Sum('total_income_loss'))['total_income_loss__sum'] or 0

    company_pallets = CompanyPallets.objects.select_related('company_name')

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞–ª–ª–µ—Ç
    if request.method == 'POST' and 'update_pallets' in request.POST:
        for pallet in company_pallets:
            new_pallet_count = request.POST.get(f"pallets_{pallet.id}")
            new_cages_count = request.POST.get(f"cages_{pallet.id}")  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–µ—Ç–æ–∫
            new_bags_count = request.POST.get(f"bags_{pallet.id}")

            if new_pallet_count is not None:
                pallet.pallets_count = int(new_pallet_count)
            if new_cages_count is not None:
                pallet.cages_count = int(new_cages_count)

            if new_bags_count is not None:
                pallet.bags_count = int(new_bags_count)

            pallet.save()
        return HttpResponseRedirect(request.path)

    years = Deals.objects.annotate(year=ExtractYear('date')).values_list('year', flat=True).distinct()
    months = range(1, 13)

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–¥–∏–Ω context
    context = {
        'chart_data': chart_data,
        'year': year,
        'suppliers_income': suppliers_income_dict,
        'total_deals': total_deals,
        'total_sale': total_sale,
        'total_pallets': total_pallets,
        'transportation_fee': transportation_fee,
        'suppliers_total': suppliers_total,
        'mt_occ11': mt_occ11,
        'mt_plastic': mt_plastic,
        'mt_mixed_containers': mt_mixed_containers,
        'income': income,
        'company_pallets': company_pallets,
        'month': month,
        'years': sorted(years),
        'months': months,
    }

    return render(request, 'crm/sales_analytics.html', context)


    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–¥–∞ –∏ –º–µ—Å—è—Ü—ã
    years = Deals.objects.annotate(year=ExtractYear('date')).values_list('year', flat=True).distinct()
    months = range(1, 13)

    context = {
        'suppliers_income': suppliers_income_dict,
        'total_deals': total_deals,
        'total_sale': total_sale,
        'total_pallets': total_pallets,
        'transportation_fee': transportation_fee,
        'suppliers_total': suppliers_total,
        'mt_occ11': mt_occ11,
        'mt_plastic': mt_plastic,
        'mt_mixed_containers': mt_mixed_containers,
        'income': income,
        'company_pallets': company_pallets,
        'month': month,
        'year': year,
        'years': sorted(years),
        'months': months,
    }



def add_contact_material(request, contact_id):
    contact = get_object_or_404(Contact, id=contact_id)

    if request.method == 'POST':
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ñ–æ—Ä–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ POST-–∑–∞–ø—Ä–æ—Å–∞
        form = ContactMaterialForm(request.POST, request.FILES)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ä–º–∞ –≤–∞–ª–∏–¥–Ω–∞
        if form.is_valid():
            # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞ –≤–∞–ª–∏–¥–Ω–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª
            contact_material = form.save(commit=False)
            contact_material.contact = contact  # –°–≤—è–∑—ã–≤–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª —Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
            contact_material.save()

            # –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
            return redirect('view_contact', id = contact.id)

    else:
        # –ï—Å–ª–∏ –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞ GET, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é —Ñ–æ—Ä–º—É
        form = ContactMaterialForm()

    # –†–µ–Ω–¥–µ—Ä–∏–º —à–∞–±–ª–æ–Ω —Å —Ñ–æ—Ä–º–æ–π –∏ –¥–∞–Ω–Ω—ã–º–∏ –æ –∫–æ–Ω—Ç–∞–∫—Ç–µ
    return render(request, 'crm/add_contact_material.html', {'form': form, 'contact': contact})


def edit_contact_material(request, pk):
    contact_material = get_object_or_404(ContactMaterial, pk=pk)

    if request.method == 'POST':
        form = ContactMaterialForm(request.POST, instance=contact_material)
        if form.is_valid():
            form.save()
            return redirect('view_contact', id=contact_material.contact.id)
    else:
        form = ContactMaterialForm(instance=contact_material)

    return render(request, 'crm/edit_contact_material.html', {'form': form, 'contact_material': contact_material})


#REPORTS

def report_list(request):
    return render(request, 'crm/report_list.html')


def company_report(request):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∏ –≥–æ–¥
    now = datetime.now()
    current_month = now.month
    current_year = now.year

    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    selected_company_id = request.GET.get('company', '')
    month = request.GET.get('month', '') or str(current_month).zfill(2)
    year = request.GET.get('year', '') or str(current_year)

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–¥–µ–ª–æ–∫
    deals = Deals.objects.all()

    if selected_company_id:
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º –∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º
        deals = deals.filter(Q(supplier__id=int(selected_company_id)))

    if month and year:
        deals = deals.filter(date__month=int(month), date__year=int(year))
    elif month:  # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ç–æ–ª—å–∫–æ –º–µ—Å—è—Ü
        deals = deals.filter(date__month=int(month))
    elif year:  # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ç–æ–ª—å–∫–æ –≥–æ–¥
        deals = deals.filter(date__year=int(year))

    # –ò—Ç–æ–≥–∏
    total_amount_supplier = deals.aggregate(Sum('supplier_total'))['supplier_total__sum'] or 0


    # –°–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤ —Ñ–∏–ª—å—Ç—Ä–µ
    companies = Company.objects.filter(contacts__company_type='suppliers').distinct()

    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–¥–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    years = Deals.objects.annotate(year=ExtractYear('date')).values_list('year', flat=True).distinct()

    # –°–ø–∏—Å–æ–∫ –º–µ—Å—è—Ü–µ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    months = range(1, 13)  # –ú–µ—Å—è—Ü—ã —Å 1 –ø–æ 12

    # –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —à–∞–±–ª–æ–Ω–∞
    context = {
        'deals': deals,
        'total_amount_supplier': total_amount_supplier,
        'companies': companies,
        'selected_company_id': int(selected_company_id) if selected_company_id.isdigit() else None,
        'month': month,
        'year': year,
        'years': sorted(years),  # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ª–µ—Ç –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        'months': months,  # –ú–µ—Å—è—Ü—ã –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
    }
    return render(request, 'crm/company_report.html', context)



def export_company_report_pdf(request):
    # --- –∏–º–ø–æ—Ä—Ç—ã ---
    from io import BytesIO                                      # –±—É—Ñ–µ—Ä –¥–ª—è PDF
    from datetime import datetime                                # –¥–∞—Ç—ã
    from django.http import HttpResponse                         # –æ—Ç–≤–µ—Ç
    from reportlab.lib.pagesizes import A4                       # —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    from reportlab.pdfgen import canvas                          # –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π canvas
    from reportlab.platypus import Table, TableStyle             # —Ç–∞–±–ª–∏—Ü–∞
    from reportlab.lib import colors                             # —Ü–≤–µ—Ç–∞
    from reportlab.lib.utils import ImageReader                  # –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    import os                                                    # –ø—É—Ç–∏
    from django.conf import settings                             # BASE_DIR
    from django.utils.text import slugify                        # –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞

    # --- –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤ ---
    selected_company_id = request.GET.get('company', '')         # –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è
    month = request.GET.get('month', '')                         # –º–µ—Å—è—Ü
    year = request.GET.get('year', '')                           # –≥–æ–¥

    # --- –¥–∞–Ω–Ω—ã–µ ---
    now = datetime.now()                                         # —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞
    deals = Deals.objects.all()                                  # –≤—Å–µ —Å–¥–µ–ª–∫–∏
    if selected_company_id:                                      # —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–æ–º–ø–∞–Ω–∏–∏
        deals = deals.filter(supplier__id=int(selected_company_id))
    if month:                                                    # —Ñ–∏–ª—å—Ç—Ä –ø–æ –º–µ—Å—è—Ü—É
        deals = deals.filter(date__month=int(month))
    if year:                                                     # —Ñ–∏–ª—å—Ç—Ä –ø–æ –≥–æ–¥—É
        deals = deals.filter(date__year=int(year))

    deals = deals.order_by('date', 'id')                         # —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
    first_deal = deals.first()                                   # –¥–ª—è —à–∞–ø–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞

    # --- –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–∞–±–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ---
    data = [["Date", "Grade", "Net (MT)", "Price ($/MT)", "Amount ($)", "Scale Ticket"]]  # –∑–∞–≥–æ–ª–æ–≤–∫–∏
    for d in deals:                                              # —Å—Ç—Ä–æ–∫–∏
        data.append([
            d.date.strftime("%Y-%m-%d"),
            str(d.grade),
            f"{d.received_quantity:.3f}",
            f"{d.supplier_price:.2f}",
            f"{d.supplier_total:.2f}",
            str(d.scale_ticket or "")
        ])

    # --- –∏—Ç–æ–≥–∏ –ø–æ –≤—Å–µ–º—É —Å–ø–∏—Å–∫—É ---
    total_net = sum(d.received_quantity for d in deals)          # —Å—É–º–º–∞—Ä–Ω—ã–π –≤–µ—Å
    total_amount = sum(d.supplier_total for d in deals)          # —Å—É–º–º–∞—Ä–Ω–∞—è —Å—É–º–º–∞

    # --- –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ PDF ---
    buffer = BytesIO()                                           # –±—É—Ñ–µ—Ä
    pdf = canvas.Canvas(buffer, pagesize=A4)                     # canvas
    PAGE_W, PAGE_H = A4                                          # —à–∏—Ä–∏–Ω–∞/–≤—ã—Å–æ—Ç–∞
    M_L, M_R, M_T, M_B = 30, 30, 40, 40                          # –ø–æ–ª—è (–º–º –≤ –ø–æ–∏–Ω—Ç–∞—Ö ‚âà —É–∂–µ –ø–æ–∏–Ω—Ç—ã)
    usable_w = PAGE_W - M_L - M_R                                # –ø–æ–ª–µ–∑–Ω–∞—è —à–∏—Ä–∏–Ω–∞

    # --- —Ä–µ—Å—É—Ä—Å—ã (–ª–æ–≥–æ—Ç–∏–ø) ---
    logo_path = os.path.join(settings.BASE_DIR, 'crm', 'static', 'crm', 'images', 'log.png')
    # --- —Ö–µ–ª–ø–µ—Ä—ã —Ä–µ–Ω–¥–µ—Ä–∞ ---
    def draw_header():
        """–†–∏—Å—É–µ—Ç –ª–æ–≥–æ—Ç–∏–ø/–∞–¥—Ä–µ—Å/–∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –±–ª–æ–∫ —Å Customer. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç y-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É –ù–ò–ó–ê customer-–±–ª–æ–∫–∞."""
        y = PAGE_H - 60                                        # —Å—Ç–∞—Ä—Ç —Å–≤–µ—Ä—Ö—É
        # –ª–æ–≥–æ—Ç–∏–ø
        if os.path.exists(logo_path):
            pdf.drawImage(ImageReader(logo_path), M_L, y - 50, width=70, height=70, mask='auto')

        pdf.setFont("Helvetica-Bold", 16)
        pdf.drawCentredString(PAGE_W / 2, y, "Shipment Summary")

        # –∞–¥—Ä–µ—Å / –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø—Ä–∞–≤–∞
        pdf.setFont("Helvetica-Bold", 11)
        pdf.setFillColor(colors.darkblue)
        pdf.drawRightString(PAGE_W - M_R, y, "Local to Global Recycling Inc.")

        pdf.setFont("Helvetica", 9)
        pdf.setFillColor(colors.HexColor("#555555"))
        pdf.drawRightString(PAGE_W - M_R, y - 14, "19090 Lougheed Hwy.")
        pdf.drawRightString(PAGE_W - M_R, y - 26, "Pitt Meadows, BC V3Y 2M6")
        pdf.drawRightString(PAGE_W - M_R, y - 38, "wastepaperbrokers.com")

        # —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
        pdf.setStrokeColor(colors.HexColor("#aaaaaa"))
        pdf.setLineWidth(0.5)
        pdf.line(M_L, y - 50, PAGE_W - M_R, y - 50)
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ Customer
        lines = []  # —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫
        if first_deal and first_deal.supplier:
            lines.append(first_deal.supplier.name)
            contact = first_deal.supplier.contacts.filter(address__isnull=False).first()  # –∫–æ–Ω—Ç–∞–∫—Ç —Å –∞–¥—Ä–µ—Å–æ–º
            if contact and contact.address:  # –µ—Å–ª–∏ –∞–¥—Ä–µ—Å –µ—Å—Ç—å
                lines.extend(
                    [ln.strip() for ln in contact.address.strip().split('\n') if ln.strip()])  # –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –∞–¥—Ä–µ—Å–∞
            else:
                lines.append("Address not available")  # –∑–∞–≥–ª—É—à–∫–∞ –∞–¥—Ä–µ—Å–∞
        else:
            lines.append("Unknown")  # –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç

        pdf.setFont("Helvetica", 10)  # –æ–±—ã—á–Ω—ã–π —à—Ä–∏—Ñ—Ç –¥–ª—è Customer —Å—Ç—Ä–æ–∫
        y_lines = PAGE_H - 135  # —Å—Ç–∞—Ä—Ç–æ–≤–∞—è Y –¥–ª—è —Å—Ç—Ä–æ–∫ –∞–¥—Ä–µ—Å–∞
        for ln in lines:  # –≤—ã–≤–æ–¥–∏–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º
            pdf.drawString(M_L + 55, y_lines, ln)  # –ø–µ—á–∞—Ç–∞–µ–º —Å—Ç—Ä–æ–∫—É
            y_lines -= 14  # —Å–¥–≤–∏–≥–∞–µ–º –≤–Ω–∏–∑ –Ω–∞ 14pt

        return y_lines - 12  # –Ω–µ–º–Ω–æ–≥–æ –æ—Ç—Å—Ç—É–ø–∞ –ø–æ–¥ –±–ª–æ–∫–æ–º

    def table_style():
        """–ï–¥–∏–Ω—ã–π —Å—Ç–∏–ª—å —Ç–∞–±–ª–∏—Ü—ã (–ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –Ω–∞ –∫–∞–∂–¥–æ–π –ø–æ—Ä—Ü–∏–∏)."""
        return TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 9),
            ('FONTSIZE', (0, 1), (-1, -1), 9),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 6),
            ('GRID', (0, 0), (-1, -1), 0.5, colors.black),
        ])

    # ===== –•–µ–ª–ø–µ—Ä: –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –Ω–µ—Ö–≤–∞—Ç–∫–µ –º–µ—Å—Ç–∞ =====
    def ensure_space_or_new_page(y_cur, need=40):
        if y_cur - need < M_B:  # –µ—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–µ—Å—Ç–∞ –≤–Ω–∏–∑
            pdf.showPage()  # —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            return draw_header()  # —Ä–∏—Å—É–µ–º —à–∞–ø–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤—É—é –Ω–∏–∂–Ω—é—é Y
        return y_cur  # –∏–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â—É—é Y

    # ===== –•–µ–ª–ø–µ—Ä: –ø–∞–≥–∏–Ω–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã (—Ä–∏—Å—É–µ—Ç –ø–æ—Ä—Ü–∏—è–º–∏) =====
    def draw_table_paginated(all_rows, start_y):
        """
        all_rows: —Å–ø–∏—Å–æ–∫ –≤–∫–ª—é—á–∞—è –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É-–∑–∞–≥–æ–ª–æ–≤–æ–∫.
        –†–∏—Å—É–µ–º –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ: –Ω–∞ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ–¥–∏–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ + —á–∞—Å—Ç—å —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö.
        """
        col_widths = [80, 140, 60, 80, 80, 90]  # —Ç–≤–æ–∏ 6 –∫–æ–ª–æ–Ω–æ–∫
        header = all_rows[0]  # —Å—Ç—Ä–æ–∫–∞-–∑–∞–≥–æ–ª–æ–≤–æ–∫
        rows = all_rows[1:]  # —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ

        i, y_cur = 0, start_y

        while i < len(rows):
            # 1) –ø–æ–¥–æ–±—Ä–∞—Ç—å —Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö –≤–ª–µ–∑–µ—Ç –≤–º–µ—Å—Ç–µ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
            low, high, fit = 1, len(rows) - i, 0  # –º–∏–Ω–∏–º—É–º 1 —Å—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            while low <= high:
                mid = (low + high) // 2
                trial = [header] + rows[i:i + mid]
                t_try = Table(trial, colWidths=col_widths);
                t_try.setStyle(table_style())
                w_try, h_try = t_try.wrap(usable_w, 0)
                if y_cur - h_try >= M_B:
                    fit = mid
                    low = mid + 1
                else:
                    high = mid - 1

            # 2) –µ—Å–ª–∏ –¥–∞–∂–µ 1 —Å—Ç—Ä–æ–∫–∞ –Ω–µ –≤–ª–µ–∑–ª–∞ ‚Äî –Ω–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏ —à–∞–ø–∫–∞
            if fit == 0:
                pdf.showPage()
                y_cur = draw_header()
                continue

            # 3) —Ä–∏—Å—É–µ–º –ø–æ—Ä—Ü–∏—é: –æ–¥–∏–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ + fit —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö
            chunk = [header] + rows[i:i + fit]
            t = Table(chunk, colWidths=col_widths);
            t.setStyle(table_style())
            w, h = t.wrap(usable_w, 0)
            x = M_L + (usable_w - w) / 2  # —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –≤ –ø–æ–ª–µ–∑–Ω–æ–π —à–∏—Ä–∏–Ω–µ
            t.drawOn(pdf, x, y_cur - h)
            y_cur -= h + 10
            i += fit

            # 4) –º–∞–ª–æ –º–µ—Å—Ç–∞ ‚Äî —Å—Ä–∞–∑—É –Ω–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —à–∞–ø–∫–æ–π
            if i < len(rows) and y_cur < M_B + 60:
                pdf.showPage()
                y_cur = draw_header()

        return y_cur

    # ===== –°—Ç–∞—Ä—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã 1: —Ä–∏—Å—É–µ–º —à–∞–ø–∫—É –∏ —Ç–∞–±–ª–∏—Ü—É —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ =====
    y = draw_header()  # —Ä–∏—Å—É–µ–º —à–∞–ø–∫—É, –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é Y
    y = draw_table_paginated(data, y - 10)  # —Ä–∏—Å—É–µ–º —Ç–∞–±–ª–∏—Ü—É (–Ω–∏–∂–µ —à–∞–ø–∫–∏)

    # ===== –ò—Ç–æ–≥–∏ –ø–æ–¥ —Ç–∞–±–ª–∏—Ü–µ–π (—Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏) =====
    y -= 40
    y = ensure_space_or_new_page(y, need=40)  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Å—Ç–∞ –ø–æ–¥ –±–ª–æ–∫ –∏—Ç–æ–≥–æ–≤
    pdf.setFont("Helvetica-Bold", 12)  # –∂–∏—Ä–Ω—ã–π 12pt
    pdf.drawString(M_L, y, f"Net Weight: {total_net:,.2f} MT")  # –æ–±—â–∏–π Net
    y -= 18  # —Å–¥–≤–∏–≥ –≤–Ω–∏–∑
    pdf.drawString(M_L, y, f"Revenue: ${total_amount:.2f}")  # –æ–±—â–∏–π Amount
    y -= 24  # –≤–µ—Ä–Ω—ë–º, –≥–¥–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å

    # –∞–≥—Ä–µ–≥–∏—Ä—É–µ–º
    grade_summary = {}                                            # —Å–ª–æ–≤–∞—Ä—å –∞–≥—Ä–µ–≥–∞—Ç–æ–≤
    for d in deals:
        key = (str(d.grade), float(d.supplier_price))
        if key not in grade_summary:
            grade_summary[key] = {"net": 0.0, "amount": 0.0}
        grade_summary[key]["net"] += float(d.received_quantity)
        grade_summary[key]["amount"] += float(d.supplier_total)

    # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –≤—ã–≤–æ–¥–∞
    items = sorted(grade_summary.items(), key=lambda kv: (kv[0][0], kv[0][1]))

    pdf.setFont("Helvetica", 10)
    for (grade, price), vals in items:
        line = f"{grade} (${price:.2f}) ‚Äì {vals['net']:.2f} MT ‚Äì ${vals['amount']:,.2f}"
        y = ensure_space_or_new_page(y, need=16)                  # –ø–µ—Ä–µ–Ω–æ—Å –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        pdf.drawString(M_L, y, line)
        y -= 14

    # --- –∏–º—è —Ñ–∞–π–ª–∞ ---
    raw_name = first_deal.supplier.name if first_deal and first_deal.supplier else "Unknown"
    safe_name = slugify(raw_name)
    month_str = datetime.strptime(month, "%m").strftime("%b") if month else now.strftime("%b")
    year_str = year if year else now.strftime("%Y")
    filename = f"L2G_{safe_name}_Supply_List_{month_str}_{year_str}.pdf"

    # --- —Ñ–∏–Ω–∞–ª ---
    pdf.save()                                                    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –û–î–ò–ù —Ä–∞–∑
    buffer.seek(0)                                                # –≤ –Ω–∞—á–∞–ª–æ –±—É—Ñ–µ—Ä–∞
    response = HttpResponse(buffer, content_type='application/pdf')  # –æ—Ç–¥–∞—ë–º PDF
    response['Content-Disposition'] = f'attachment; filename="{filename}"'
    return response







def get_deal_by_ticket(request):
    ticket_number = request.GET.get('ticket_number', None)
    print(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫ Scale Ticket: {ticket_number}")

    if not ticket_number:
        return JsonResponse({'success': False, 'error': 'No ticket number provided'})

    try:
        deal = Deals.objects.filter(scale_ticket=ticket_number).first()
        if not deal:
            print("–û—à–∏–±–∫–∞: –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return JsonResponse({'success': False, 'error': 'No deal found for this ticket number'}, status=404)

        print(f"–ù–∞–π–¥–µ–Ω–∞ —Å–¥–µ–ª–∫–∞: {deal}")

        return JsonResponse({
            'success': True,
            'deal': {
                'id': deal.id,
                'date': deal.date.strftime('%Y-%m-%d'),
                'received_quantity': float(deal.received_quantity),
                'received_pallets': deal.received_pallets,
                'supplier_name': deal.supplier.name if deal.supplier else "",
                'grade': deal.grade,
            }
        })
    except Exception as e:
        import traceback
        print("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:", traceback.format_exc())
        return JsonResponse({'success': False, 'error': str(e)}, status=500)







def export_scale_ticket_pdf(request):
    # ===== –ò–º–ø–æ—Ä—Ç—ã (–µ—Å–ª–∏ –Ω–µ—Ç –≤—ã—à–µ) =====
    # from io import BytesIO                                   # –±—É—Ñ–µ—Ä –¥–ª—è PDF
    # from datetime import datetime                            # –¥–∞—Ç—ã/–≤—Ä–µ–º—è
    # from decimal import Decimal                              # —Ç–æ—á–Ω–∞—è –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞
    # import os                                                # –ø—É—Ç–∏/–∫–∞—Ç–∞–ª–æ–≥–∏
    # from django.http import HttpResponse                     # HTTP-–æ—Ç–≤–µ—Ç
    # from reportlab.lib.pagesizes import A4                   # A4 –∫–∞–∫ –≤ supply list
    # from reportlab.pdfgen import canvas                      # canvas PDF
    # from reportlab.platypus import Table, TableStyle         # —Ç–∞–±–ª–∏—Ü—ã
    # from reportlab.lib import colors                         # —Ü–≤–µ—Ç–∞
    # from reportlab.lib.utils import ImageReader              # –ª–æ–≥–æ
    # from django.conf import settings                         # BASE_DIR, MEDIA_ROOT
    # from .models import Deals                                # –º–æ–¥–µ–ª—å —Å–¥–µ–ª–æ–∫
    # from .utils import sanitize_filename                     # –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏–º–µ–Ω–∞

    # ===== –•–µ–ª–ø–µ—Ä: –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ Decimal =====
    def D(val, default='0'):
        # # –ü—Ä–∏–≤–æ–¥–∏—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∫ Decimal, —É—Å—Ç–æ–π—á–∏–≤–æ –∫ None/–ø—É—Å—Ç—ã–º —Å—Ç—Ä–æ–∫–∞–º/—á–∏—Å–ª–∞–º
        try:
            if val is None or val == '':
                return Decimal(default)
            return Decimal(str(val))
        except Exception:
            return Decimal(default)

    # ===== –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ =====
    ticket_number = request.GET.get('ticket_number', None)                 # –Ω–æ–º–µ—Ä —Ç–∏–∫–µ—Ç–∞ –∏–∑ GET
    if not ticket_number:                                                  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–æ–º–µ—Ä–∞
        return HttpResponse("‚ö†Ô∏è No ticket number provided.", status=400)

    # ===== –î–∞–Ω–Ω—ã–µ –∏–∑ –ë–î =====
    deals = Deals.objects.filter(scale_ticket=ticket_number)               # –≤—Å–µ —Å–¥–µ–ª–∫–∏ –ø–æ —Ç–∏–∫–µ—Ç—É
    if not deals.exists():                                                 # –µ—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî 404
        return HttpResponse("‚ö†Ô∏è No deals found for this ticket number.", status=404)
    first_deal = deals.first()                                             # –ø–µ—Ä–≤–∞—è –¥–ª—è —à–∞–ø–∫–∏/–¥–∞—Ç

    # ===== –î–∞—Ç–∞-–∏—Å—Ç–æ—á–Ω–∏–∫ =====
    date_src   = getattr(first_deal, "date", None) or datetime.today().date()  # –¥–∞—Ç–∞ —Å–¥–µ–ª–∫–∏/—Å–µ–≥–æ–¥–Ω—è
    year       = date_src.strftime("%Y")                                    # '2025'
    month_num  = date_src.strftime("%m")                                    # '09'
    month_name = date_src.strftime("%B")                                    # 'September'
    month_dir  = f"{year}-{month_num}"                                      # '2025-09' –¥–ª—è –ø–∞–ø–æ–∫

    # ===== –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–æ—Ä–º—ã =====
    licence_plate = request.GET.get('licence_plate', "N/A")                 # –≥–æ—Å–Ω–æ–º–µ—Ä –∞–≤—Ç–æ
    tare_weight   = D(request.GET.get('tare_weight', '5170'))               # —Ç–∞—Ä–∞, –∫–≥ (Decimal)
    deal_time     = request.GET.get('time') or datetime.now().strftime('%H:%M')  # –≤—Ä–µ–º—è HH:MM

    # ===== –ò—Ç–æ–≥–∏ –≤–µ—Å–∞ (–∫–∞–∫ Decimal) =====
    # # received_quantity —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –ú–¢ ‚Üí –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –∫–≥ (*1000)
    total_material_weight = sum(D(d.received_quantity) * D(1000) for d in deals)   # –∫–≥ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    total_pallets_weight  = sum(D(d.received_pallets) * D(15) for d in deals)      # –∫–≥ –ø–∞–ª–ª–µ—Ç (15 –∫–≥/—à—Ç)
    net_weight   = total_material_weight + total_pallets_weight                     # –Ω–µ—Ç—Ç–æ (–∫–≥)
    gross_weight = tare_weight + net_weight                                        # –±—Ä—É—Ç—Ç–æ (–∫–≥)

    # ===== –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫ (—Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á) =====
    gross_weight_str = f"{gross_weight:,.1f} KG"                                   # '5,195.0 KG'
    tare_weight_str  = f"{tare_weight:,.1f} KG"
    net_weight_str   = f"{net_weight:,.1f} KG"

    # ===== –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ PDF (–∫–∞–∫ –≤ supply list) =====
    buffer = BytesIO()                                                             # –±—É—Ñ–µ—Ä –≤ –ø–∞–º—è—Ç–∏
    pdf = canvas.Canvas(buffer, pagesize=A4)                                       # —Ñ–æ—Ä–º–∞—Ç A4
    PAGE_W, PAGE_H = A4                                                            # —à–∏—Ä–∏–Ω–∞/–≤—ã—Å–æ—Ç–∞
    M_L, M_R, M_T, M_B = 30, 30, 40, 40                                           # –ø–æ–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    usable_w = PAGE_W - M_L - M_R                                                  # –ø–æ–ª–µ–∑–Ω–∞—è —à–∏—Ä–∏–Ω–∞
    logo_path = os.path.join(settings.BASE_DIR, 'crm', 'static', 'crm', 'images', 'log.png')  # –ª–æ–≥–æ
    INK = colors.HexColor('#141b2d')

    # ===== –¶–≤–µ—Ç–∞/—Ö–µ–ª–ø–µ—Ä—ã –¥–ª—è —Ñ—É—Ç–µ—Ä–∞ =====
    TEXT_MUTED = colors.HexColor("#555555")  # –ø—Ä–∏–≥–ª—É—à—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç

    def hr(y):
        """–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è —Ç–æ–Ω–∫–∞—è –ª–∏–Ω–∏—è-—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å"""
        pdf.setStrokeColor(colors.HexColor("#aaaaaa"))
        pdf.setLineWidth(0.5)
        pdf.line(M_L, y, PAGE_W - M_R, y)

    def safe_supplier_address_lines():
        # # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –∞–¥—Ä–µ—Å–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å address, –µ—Å–ª–∏ –µ—Å—Ç—å
        lines = []
        try:
            supplier = getattr(first_deal, "supplier", None)  # # –ö–æ–º–ø–∞–Ω–∏—è-–ø–æ—Å—Ç–∞–≤—â–∏–∫
            if supplier:
                lines.append(supplier.name or "Unknown")  # # –ò–º—è –∫–æ–º–ø–∞–Ω–∏–∏
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç —Å –∞–¥—Ä–µ—Å–æ–º
                contact = getattr(supplier, "contacts", None)
                if contact:
                    c = contact.filter(address__isnull=False).first()
                    if c and c.address:
                        # –†–∞–∑–±–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å –ø–æ —Å—Ç—Ä–æ–∫–∞–º
                        addr_lines = [ln.strip() for ln in str(c.address).split('\n') if ln.strip()]
                        if addr_lines:
                            lines.extend(addr_lines)
                        else:
                            lines.append("Address not available")
                else:
                    lines.append("Address not available")
            else:
                lines.append("Unknown")
        except Exception:
            lines = ["Unknown"]
        return lines

    # ===== –•–µ–¥–µ—Ä  =====
    def draw_header():
        y = PAGE_H - 60                                                            # —Å—Ç–∞—Ä—Ç –ø–æ Y –¥–ª—è —à–∞–ø–∫–∏

        if os.path.exists(logo_path):                                              # –ª–æ–≥–æ —Å–ª–µ–≤–∞
            pdf.drawImage(ImageReader(logo_path), M_L, y - 50, width=70, height=70, mask='auto')

        pdf.setFont("Helvetica-Bold", 16)                                          # –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ —Ü–µ–Ω—Ç—Ä—É
        pdf.drawCentredString(PAGE_W / 2, y, "Scale Ticket")

        pdf.setFont("Helvetica-Bold", 11)                                          # —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —Å–ø—Ä–∞–≤–∞
        pdf.setFillColor(colors.darkblue)
        pdf.drawRightString(PAGE_W - M_R, y, "Local to Global Recycling Inc.")
        pdf.setFont("Helvetica", 9)
        pdf.setFillColor(colors.HexColor("#555555"))
        pdf.drawRightString(PAGE_W - M_R, y - 14, "19090 Lougheed Hwy.")
        pdf.drawRightString(PAGE_W - M_R, y - 26, "Pitt Meadows, BC V3Y 2M6")
        pdf.drawRightString(PAGE_W - M_R, y - 38, "wastepaperbrokers.com")

        pdf.setStrokeColor(colors.HexColor("#aaaaaa"))                             # —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
        pdf.setLineWidth(0.5)
        pdf.line(M_L, y - 50, PAGE_W - M_R, y - 50)

        # –ë–ª–æ–∫ ¬´Ticket / Date / Time / Month¬ª —Å–ª–µ–≤–∞
        y_info = PAGE_H - 160
        pdf.setFillColor(colors.black)
        pdf.setFont("Helvetica-Bold", 10)
        pdf.drawString(M_L, y_info, f"Scale Ticket #: {ticket_number}")            # –Ω–æ–º–µ—Ä —Ç–∏–∫–µ—Ç–∞
        pdf.setFont("Helvetica", 10)
        pdf.drawString(M_L, y_info - 16, f"Date:  {date_src.strftime('%Y-%m-%d')}")# –¥–∞—Ç–∞
        pdf.drawString(M_L, y_info - 30, f"Time:  {deal_time}")                    # –≤—Ä–µ–º—è


        # –ë–ª–æ–∫ ¬´Customer¬ª
        pdf.setFont("Helvetica-Bold", 10)
        pdf.setFillColor(INK)
        pdf.drawString(M_L, y_info - 68, "Customer:")
        pdf.setFont("Helvetica", 10)

        cust_lines = safe_supplier_address_lines()  # <-- –∏–º—è + —Å—Ç—Ä–æ–∫–∏ –∞–¥—Ä–µ—Å–∞
        y_lines = y_info - 84
        for ln in cust_lines:
            pdf.drawString(M_L + 12, y_lines, str(ln).strip())
            y_lines -= 14


        # –ü—Ä–∞–≤—ã–π –±–ª–æ–∫ —Å —á–∏–ø–∞–º–∏ –≤–µ—Å–æ–≤/—Ç–∞–±–ª–∏—á–∫–∞–º–∏ (–ø—Ä–æ—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º, —á—Ç–æ–±—ã –Ω–µ —É—Å–ª–æ–∂–Ω—è—Ç—å)
        r_x = PAGE_W - M_R - 220
        pdf.setFont("Helvetica", 10)
        pdf.drawRightString(PAGE_W - M_R, y_info,     f"Licence: {licence_plate}") # –Ω–æ–º–µ—Ä –∞–≤—Ç–æ
        pdf.drawRightString(PAGE_W - M_R, y_info - 16, f"Gross:   {gross_weight_str}") # –±—Ä—É—Ç—Ç–æ
        pdf.drawRightString(PAGE_W - M_R, y_info - 30, f"Tare:    {tare_weight_str}")  # —Ç–∞—Ä–∞
        pdf.drawRightString(PAGE_W - M_R, y_info - 44, f"Net:     {net_weight_str}")   # –Ω–µ—Ç—Ç–æ
        pdf.drawRightString(PAGE_W - M_R, y_info - 58, f"Pallets #: {int(D(getattr(first_deal,'received_pallets',0)))}") # –ø–∞–ª–ª–µ—Ç—ã

        return min(y - 12, y_info - 120)                                      # –≤–µ—Ä–Ω—É—Ç—å –Ω–∏–∂–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É Y

    def draw_footer():
        # –ù–∏–∂–Ω—è—è –ª–∏–Ω–∏—è + –ø–æ–¥–ø–∏—Å—å –≤—Å–µ–≥–¥–∞ –Ω–∞ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π –≤—ã—Å–æ—Ç–µ
        hr(M_B + 18)
        pdf.setFont("Helvetica", 8);
        pdf.setFillColor(TEXT_MUTED)
        pdf.drawString(M_L, M_B + 6, "Thank you for recycling responsibly.")
        pdf.drawRightString(PAGE_W - M_R, M_B + 6, "Generated by L2G CRM")



    # ===== –ï–¥–∏–Ω—ã–π —Å—Ç–∏–ª—å —Ç–∞–±–ª–∏—Ü—ã (–∫–∞–∫ –≤ supply list) =====
    def table_style():
        return TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),                           # —Ñ–æ–Ω –∑–∞–≥–æ–ª–æ–≤–∫–∞
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),                      # —Ç–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),                                  # –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ —Ü–µ–Ω—Ç—Ä—É
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),                        # –∂–∏—Ä–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
            ('FONTSIZE', (0, 0), (-1, 0), 9),                                       # –∫–µ–≥–ª—å –∑–∞–≥–æ–ª–æ–≤–∫–∞
            ('FONTSIZE', (0, 1), (-1, -1), 9),                                      # –∫–µ–≥–ª—å —è—á–µ–µ–∫
            ('BOTTOMPADDING', (0, 0), (-1, 0), 6),                                  # –æ—Ç—Å—Ç—É–ø –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
            ('GRID', (0, 0), (-1, -1), 0.5, colors.black),                          # —Å–µ—Ç–∫–∞ 0.5pt
        ])

    # ===== –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ –Ω–µ—Ö–≤–∞—Ç–∫–µ –º–µ—Å—Ç–∞ =====
    def ensure_space_or_new_page(y_cur, need=40):
        if y_cur - need < M_B:
            draw_footer()
            pdf.showPage()                                                          # –Ω–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            return draw_header()                                                    # —Ä–∏—Å—É–µ–º —à–∞–ø–∫—É –∑–∞–Ω–æ–≤–æ
        return y_cur                                                                # –∏–Ω–∞—á–µ –≤–µ—Ä–Ω—É—Ç—å —Ç–µ–∫—É—â—É—é Y

    # ===== –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã =====
    def draw_table_paginated(all_rows, start_y):
        col_widths = [140, 100, 100, 110]                                          # —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
        header = all_rows[0]                                                        # —à–∞–ø–∫–∞
        rows = all_rows[1:]                                                         # –¥–∞–Ω–Ω—ã–µ
        i, y_cur = 0, start_y                                                       # –∏–Ω–¥–µ–∫—Å –∏ —Ç–µ–∫—É—â–∞—è Y
        while i < len(rows):                                                        # –ø–æ–∫–∞ –Ω–µ –≤—ã–≤–µ–ª–∏ –≤—Å–µ —Å—Ç—Ä–æ–∫–∏
            # –±–∏–Ω–ø–æ–∏—Å–∫: —Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –≤–ª–µ–∑–µ—Ç
            low, high, fit = 1, len(rows) - i, 0
            while low <= high:
                mid = (low + high) // 2
                trial = [header] + rows[i:i + mid]
                t_try = Table(trial, colWidths=col_widths); t_try.setStyle(table_style())
                w_try, h_try = t_try.wrap(usable_w, 0)
                if y_cur - h_try >= M_B:
                    fit = mid; low = mid + 1
                else:
                    high = mid - 1
            if fit == 0:                                                            # —Å–æ–≤—Å–µ–º –Ω–µ –≤–ª–µ–∑–∞–µ—Ç
                pdf.showPage(); y_cur = draw_header(); continue                     # –Ω–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏ —Å–Ω–æ–≤–∞
            # —Ä–∏—Å—É–µ–º –ø–æ—Ä—Ü–∏—é
            chunk = [header] + rows[i:i + fit]
            t = Table(chunk, colWidths=col_widths); t.setStyle(table_style())
            w, h = t.wrap(usable_w, 0)
            x = M_L + (usable_w - w) / 2                                           # —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –≤ –ø–æ–ª—è—Ö
            t.drawOn(pdf, x, y_cur - h)
            y_cur -= h + 10                                                         # –æ–ø—É—Å–∫–∞–µ–º –∫—É—Ä—Å–æ—Ä
            i += fit                                                                # —Å–º–µ—â–∞–µ–º –∏–Ω–¥–µ–∫—Å
            if i < len(rows) and y_cur < M_B + 60:                                  # –µ—Å–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –º–∞–ª–æ –º–µ—Å—Ç–∞
                pdf.showPage(); y_cur = draw_header()                               # ‚Äì –Ω–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        return y_cur                                                                # –≤–µ—Ä–Ω—É—Ç—å –Ω–∏–∂–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É

    # ===== –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã =====
    data = [['MATERIAL', 'WEIGHT (KG)', 'PRICE ($/KG)', 'AMOUNT ($)']]             # —à–∞–ø–∫–∞
    total_amount = Decimal('0')                                                     # –∏—Ç–æ–≥ –≤ Decimal
    for d in deals:                                                                 # –ø–æ —Å–¥–µ–ª–∫–∞–º
        received_kg  = D(d.received_quantity) * D(1000)                             # –≤–µ—Å –≤ –∫–≥
        sup_price_kg = D(d.supplier_price) / D(1000)                                # $/–∫–≥
        amount       = received_kg * sup_price_kg                                   # —Å—É–º–º–∞
        total_amount += amount                                                      # –∫ –∏—Ç–æ–≥—É
        data.append([
            str(d.grade),                                                           # –º–∞—Ç–µ—Ä–∏–∞–ª
            f"{received_kg:,.1f}",                                                  # –≤–µ—Å
            f"{sup_price_kg:.4f}",                                                  # —Ü–µ–Ω–∞/–∫–≥ (4 –∑–Ω–∞–∫–∞)
            f"{amount:,.2f}",                                                       # —Å—É–º–º–∞
        ])

    if total_pallets_weight > 0:                                                    # –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É –ø–∞–ª–ª–µ—Ç
        data.append(['Pallets (weight)', f"{total_pallets_weight:,.1f}", '', ''])   # –≤–µ—Å –ø–∞–ª–ª–µ—Ç

    # ===== –†–µ–Ω–¥–µ—Ä —à–∞–ø–∫–∏ –∏ —Ç–∞–±–ª–∏—Ü—ã =====
    y = draw_header()                                                               # —Ä–∏—Å—É–µ–º —à–∞–ø–∫—É
    y = draw_table_paginated(data, y - 10)                                          # —Ä–∏—Å—É–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏

    # ===== –ò—Ç–æ–≥ –ø–æ–¥ —Ç–∞–±–ª–∏—Ü–µ–π =====
    y = ensure_space_or_new_page(y, need=30)                                        # –º–µ—Å—Ç–æ –ø–æ–¥ –∏—Ç–æ–≥
    pdf.setFont("Helvetica-Bold", 12)                                               # –∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç
    pdf.drawString(M_L, y - 18, f"Revenue: ${total_amount:,.2f}")                     # –ò–¢–û–ì–û $

    # === –§—É—Ç–µ—Ä –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ ===
    draw_footer()


    # ===== –ü—É—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è =====
    raw_supplier_name = first_deal.supplier.name if first_deal.supplier else "Unknown Supplier"  # –∏–º—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
    supplier_name = sanitize_filename(raw_supplier_name)                            # –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è –¥–ª—è FS
    directory = os.path.join(                                                       # –ø–∞–ø–∫–∞: .../supplier/YYYY-MM/
        settings.MEDIA_ROOT, "reports", "scale_tickets", supplier_name, month_dir
    )
    os.makedirs(directory, exist_ok=True)                                           # —Å–æ–∑–¥–∞—ë–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

    # ===== –ò–º—è —Ñ–∞–π–ª–∞ (–∫–∞–∫ —É–∫–∞–∑—ã–≤–∞–ª) =====
    filename = f"Ticket {ticket_number}-{supplier_name}-{month_dir}.pdf"            # —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è
    filepath = os.path.join(directory, filename)                                    # –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –Ω–∞ –¥–∏—Å–∫

    # ===== –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ PDF/–æ—Ç–≤–µ—Ç =====
    pdf.save()                                                                      # –∑–∞–∫—Ä—ã—Ç—å PDF
    buffer.seek(0)                                                                  # –ø–µ—Ä–µ–º–æ—Ç–∫–∞ –Ω–∞ –Ω–∞—á–∞–ª–æ
    with open(filepath, "wb") as f:                                                 # –∑–∞–ø–∏—Å—å –Ω–∞ –¥–∏—Å–∫
        f.write(buffer.getvalue())
    response = HttpResponse(buffer, content_type="application/pdf")                 # HTTP-–æ—Ç–≤–µ—Ç
    response["Content-Disposition"] = f'attachment; filename="{filename}"'          # —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ñ–∞–π–ª–æ–º
    return response

# –û–±–ª–∞—Å—Ç—å –¥–æ—Å—Ç—É–ø–∞
SCOPES = ['https://www.googleapis.com/auth/calendar.readonly']
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
CREDENTIALS_FILE = os.path.join(BASE_DIR, "c_id.json")
TOKEN_FILE = os.path.join(BASE_DIR, "token.json")


from .models import SCaleTicketStatus  # ‚Üê –∏—Å–ø–æ–ª—å–∑—É–π –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–æ —É —Ç–µ–±—è

def scale_ticket_browser(request):
    relative_path = request.GET.get('path', '').strip('/')

    base_dir = os.path.join(settings.MEDIA_ROOT, 'reports', 'scale_tickets')
    abs_path = os.path.join(base_dir, relative_path)

    if not os.path.exists(abs_path):
        return HttpResponse("‚ùå Path not found", status=404)

    folders = []
    files = []

    for entry in sorted(os.listdir(abs_path)):
        full_entry = os.path.join(abs_path, entry)
        if os.path.isdir(full_entry):
            folders.append(entry)
        elif entry.lower().endswith('.pdf'):
            files.append(entry)

    if relative_path:
        path_parts = relative_path.split('/')
        back_path = '/'.join(path_parts[:-1])
    else:
        back_path = None

    # ‚úÖ –°—Ç–∞—Ç—É—Å—ã
    file_statuses = {
        s.file_path.strip().replace('\\', '/'): True
        for s in SCaleTicketStatus.objects.filter(sent=True)
    }

    context = {
        'relative_path': relative_path,
        'folders': folders,
        'files': files,
        'back_path': back_path,
        'file_statuses': file_statuses,
    }


    return render(request, 'crm/scale_ticket_browser.html', context)

from django.core.mail import EmailMessage

@csrf_exempt
def send_scale_ticket_email(request):
    import json
    from django.utils.timezone import now

    if request.method == 'POST':
        data = json.loads(request.body)
        relative_path = data.get('path')
        recipient_email = data.get('email')  # –≤ –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ

        abs_path = os.path.join(settings.MEDIA_ROOT, 'reports', 'scale_tickets', relative_path)
        if not os.path.exists(abs_path):
            return JsonResponse({'error': 'File not found'}, status=404)

        try:
            email = EmailMessage(
                subject="üìé Scale Ticket",
                body="Attached scale ticket file.",
                from_email=settings.EMAIL_HOST_USER,
                to=[recipient_email],
            )
            email.attach_file(abs_path)
            email.send()

            status, created = SCaleTicketStatus.objects.get_or_create(file_path=relative_path)
            status.sent = True
            status.sent_at = now()
            status.save()

            return JsonResponse({'success': True})
        except Exception as e:
            return JsonResponse({'error': str(e)}, status=500)

# ID –∫–∞–ª–µ–Ω–¥–∞—Ä—è
CALENDAR_ID = "dmitry@wastepaperbrokers.com"

def get_calendar_events():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –∏–∑ Google Calendar."""
    creds = None
    if os.path.exists(TOKEN_FILE):
        creds = Credentials.from_authorized_user_file(TOKEN_FILE, SCOPES)

    if not creds or not creds.valid:
        try:
            flow = InstalledAppFlow.from_client_secrets_file(CREDENTIALS_FILE, SCOPES)
            creds = flow.run_local_server(port=8081, access_type="offline", prompt="consent")
            with open(TOKEN_FILE, "w") as token:
                token.write(creds.to_json())
        except Exception as e:
            return {"error": f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}"}

    try:
        service = build("calendar", "v3", credentials=creds)
        now = datetime.now(t.utc).replace(microsecond=0).isoformat() + "Z"

        events_result = service.events().list(
            calendarId=CALENDAR_ID,
            timeMin=now,
            maxResults=20,
            singleEvents=True,
            orderBy="startTime",
        ).execute()

        events = events_result.get("items", [])
    except Exception as e:
        return {"error": f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π: {str(e)}"}

    return events

def task_list(request):
    suppliers = Company.objects.filter(contacts__company_type="suppliers")
    buyers = Company.objects.filter(contacts__company_type="buyers")
    generate_recurring_shipments()

    context = {
        'suppliers': suppliers,
        'buyers': buyers,
        'materials_list': settings.MATERIALS_LIST,  # ‚úÖ –ü–µ—Ä–µ–¥–∞–µ–º MATERIALS_LIST –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    }
    return render(request, 'crm/task_list.html', context)


def get_events(request):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –¥–ª—è FullCalendar"""
    events = Event.objects.all()
    event_list = [
        {
            "id": event.id,
            "title": event.title,
            "start": event.start.strftime("%Y-%m-%dT%H:%M:%S"),
            "end": event.end.strftime("%Y-%m-%dT%H:%M:%S") if event.end else None,
            "allDay": event.all_day,
        }
        for event in events
    ]
    return JsonResponse(event_list, safe=False)

@csrf_exempt
def add_event(request):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å"""
    try:
        data = json.loads(request.body)
        title = data.get("title")
        start = data.get("start")

        if not title or not start:
            return JsonResponse({"error": "title –∏ start –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"}, status=400)

        # ‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É
        start_datetime = datetime.fromisoformat(start)

        # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–π–º–∑–æ–Ω–∞, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º
        if start_datetime.tzinfo is None:
            start_datetime = timezone.make_aware(start_datetime)

        # ‚úÖ –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –ë–î
        event = Event.objects.create(
            title=title,
            start=start_datetime,
            all_day=False
        )

        return JsonResponse({"status": "success", "event": {
            "id": event.id,
            "title": event.title,
            "start": event.start.isoformat(),
            "allDay": event.all_day
        }})

    except Exception as e:
        return JsonResponse({"error": str(e)}, status=500)




@csrf_exempt
def delete_event(request, event_id):
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ"""
    if request.method == "DELETE":
        event = Event.objects.filter(id=event_id).first()
        if event:
            event.delete()
            return JsonResponse({"status": "deleted"})
        return JsonResponse({"error": "Event not found"}, status=404)

    return JsonResponse({"error": "Invalid request"}, status=400)



def get_grades(request):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (–≥—Ä–µ–π–¥–æ–≤).
    """
    return JsonResponse(list(settings.MATERIALS_LIST.keys()), safe=False)


@csrf_exempt
def add_scheduled_shipment(request):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –æ—Ç–≥—Ä—É–∑–∫—É.
    """
    if request.method == "POST":
        data = json.loads(request.body)
        try:
            supplier = Company.objects.get(id=data["supplier"])
            buyer = Company.objects.get(id=data["buyer"])

            # üîπ –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
            date_part = data["datetime"].split("T")[0]
            time_part = data["datetime"].split("T")[1]

            # üîπ –§–ª–∞–≥–∏ –ø–æ–≤—Ç–æ—Ä–∞
            is_recurring = data.get("is_recurring", False)
            recurrence_type = data.get("recurrence_type", None)
            recurrence_day = data.get("recurrence_day", None)

            shipment = ScheduledShipment.objects.create(
                supplier=supplier,
                buyer=buyer,
                date=data["datetime"].split("T")[0],
                time=data["datetime"].split("T")[1],
                grade=data["grade"],
                is_recurring=data.get("is_recurring", False),
                recurrence_type=data.get("recurrence_type", None),
                recurrence_day=data.get("recurrence_day", None)
            )

            return JsonResponse({"status": "success", "shipment_id": shipment.id})
        except Company.DoesNotExist:
            return JsonResponse({"error": "Supplier or Buyer not found"}, status=400)

    return JsonResponse({"error": "Invalid request"}, status=400)


def get_scheduled_shipments(request):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–≥—Ä—É–∑–æ–∫.
    """
    shipments = ScheduledShipment.objects.filter(is_done=False).order_by("date")
    shipment_list = [
        {
            "id": shipment.id,
            "date": shipment.date.strftime("%Y-%m-%d"),
            "time": shipment.time.strftime("%H:%M"),
            "supplier": shipment.supplier.name,
            "buyer": shipment.buyer.name,
            "grade": shipment.grade
        }
        for shipment in shipments
    ]
    return JsonResponse(shipment_list, safe=False)

@csrf_exempt
def delete_scheduled_shipment(request, shipment_id):
    """
    –£–¥–∞–ª—è–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –æ—Ç–≥—Ä—É–∑–∫—É.
    """
    if request.method == "DELETE":
        try:
            shipment = ScheduledShipment.objects.get(id=shipment_id)
            shipment.delete()
            return JsonResponse({"status": "deleted"})
        except ScheduledShipment.DoesNotExist:
            return JsonResponse({"error": "Shipment not found"}, status=404)

    return JsonResponse({"error": "Invalid request"}, status=400)



from reportlab.platypus import Table, TableStyle, Paragraph
from reportlab.lib.styles import getSampleStyleSheet


@csrf_exempt
def generate_bol_pdf(request):
    if request.method == 'POST':
        data = json.loads(request.body)

        buffer = BytesIO()
        p = canvas.Canvas(buffer, pagesize=letter)
        width, height = letter
        spacing = 15
        y = height - 50

        # üì¶ –õ–æ–≥–æ—Ç–∏–ø –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
        logo_path = os.path.join(settings.BASE_DIR, 'crm', 'static', 'crm', 'images', 'company_logo.png')
        if os.path.exists(logo_path):
            p.drawImage(ImageReader(logo_path), 40, height - 75, width=70, height=50, mask='auto')

        # üè¢ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –∞–¥—Ä–µ—Å —Å–ø—Ä–∞–≤–∞
        p.setFont("Helvetica-Bold", 10)
        p.setFillColor(colors.darkblue)
        p.drawRightString(width - 40, height - 45, "Local to Global Recycling Inc.")

        p.setFont("Helvetica", 8)
        p.setFillColor(colors.black)
        p.drawRightString(width - 40, height - 58, "19090 Lougheed Hwy.")
        p.drawRightString(width - 40, height - 68, "Pitt Meadows, BC V3Y 2M6")

        # üßæ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ —Ü–µ–Ω—Ç—Ä—É
        p.setFont("Helvetica-Bold", 12)
        p.drawCentredString(width / 2, height - 45, "BILL OF LADING")

        # üîπ BOL Number –ø–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º (—Å –æ—Ç—Å—Ç—É–ø–æ–º –≤–Ω–∏–∑)
        bol_number = data.get("bolNumber", "BOL-00000")
        p.setFont("Helvetica-Bold", 12)
        p.drawCentredString(width / 2, height - 65, f"{bol_number}")

        # üìã –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_y = height - 280
        p.setFont("Helvetica", 10)

        def draw_line(label, value):
            nonlocal y
            p.drawString(40, y, f"{label}: {value}")
            y -= spacing

        freight = data.get("freightTerms", "").strip().lower()
        checkbox_line = (
            "Freight Charge Terms:\n"
            "(freight charges are prepaid unless marked otherwise)\n\n"
        
            f"Prepaid {'‚úì' if freight == 'prepaid' else ''}________     "
            f"Collect {'‚úì' if freight == 'collect' else ''}________     "
            f"3rd Party {'‚úì' if freight == '3rd party' else ''}________"
        )

        shipping_info = (
            f"Ship Date: {data.get('shipDate', '')}    Due Date: {data.get('dueDate', '')}\n"
            f"Carrier: {data.get('carrier', '')}\n"
            f"PO Number: {data.get('poNumber', '')}"
        )

        supp_info = (
            f"{data.get('shipFrom', '')}\n"
            f"{data.get('shipFromAddress', '')}\n"

        )

        buyer_info = (
            f"{data.get('shipTo', '')}\n"
            f"{data.get('shipToAddress', '')}\n"

        )

        references_info = (
            f"BOL # {data.get('bolNumber', '')}\n"
            f"Load # {data.get('loadNumber', '')}\n"
            f"PO Number: {data.get('poNumber', '')}"
        )

        styles = getSampleStyleSheet()

        info_data = [
            ["SHIP FROM", ""],
            [supp_info, shipping_info],
            ["SHIP TO","REFERENCES"],
            [buyer_info,references_info],
            ["THIRD PARTY FREIGHT CHARGES BILL TO: ", "FREIGHT CHARGE  TERMS: "],
            ["", checkbox_line],

        ]

        info_col_widths = [285, 285]
        info_table_width = sum(info_col_widths)
        x_info = (width - info_table_width) / 2  # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ —à–∏—Ä–∏–Ω–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã

        info_table = Table(info_data, colWidths=info_col_widths)
        info_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.lightgrey),  # SHIP FROM
            ('BACKGROUND', (0, 2), (-1, 2), colors.lightgrey),  # SHIP TO / REFERENCES
            ('BACKGROUND', (0, 4), (-1, 4), colors.lightgrey),  # THIRD PARTY / TERMS (–µ—Å–ª–∏ —Ö–æ—á–µ—à—å)

            ('TEXTCOLOR', (0, 0), (-1, 0), colors.black),
            ('TEXTCOLOR', (0, 2), (-1, 2), colors.black),
            ('TEXTCOLOR', (0, 4), (-1, 4), colors.black),

            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('GRID', (0, 0), (-1, -1), 0.5, colors.black)
        ]))
        info_table.wrapOn(p, width, height)
        info_table.drawOn(p, x_info, info_y)


        # üì¶ –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤
        y = info_y - info_table._height + 120

        col_widths = [50, 60, 60, 50, 35, 170, 60, 40, 40]
        table_width = sum(col_widths)

        headers = ["QTY", "Handling", "PKG", "WT", "HM", "COMMODITY DESCRIPTION", "DIMS", "CLASS", "NMFC"]
        commodities = data.get('commodities', [])
        table_data = [headers]
        total_weight = 0

        for item in commodities:
            wt = float(item.get("weight", 0) or 0)
            total_weight += wt
            row = [
                item.get("qty", ""),
                item.get("handling", ""),
                item.get("pkg", ""),
                wt,
                item.get("hm", ""),
                item.get("description", ""),
                item.get("dims", ""),
                item.get("class", ""),
                item.get("nmfc", "")
            ]
            table_data.append(row)

        # üëâ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É TOTAL
        table_data.append(['', '', '', f"{total_weight:.1f}", '', 'TOTAL', '', '', ''])
        num_rows = len(table_data)

        # üëâ —Å–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É
        commodity_table = Table(table_data, colWidths=col_widths)
        commodity_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.lightgrey),  # –∑–∞–≥–æ–ª–æ–≤–∫–∏
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.black),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 9),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 6),
            ('GRID', (0, 0), (-1, 0), 0.5, colors.black),

            ('BOX', (0, 1), (-1, -1), 0.5, colors.black),  # –≤–Ω–µ—à–Ω—è—è —Ä–∞–º–∫–∞
            ('INNERGRID', (0, 1), (-1, -1), 0, colors.white),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 1), (-1, -1), 9),

            # üëâ —Å—Ç—Ä–æ–∫–∞ TOTAL ‚Äî –∂–∏—Ä–Ω–∞—è –∏ —Å–µ—Ä–∞—è
            ('BACKGROUND', (0, num_rows - 1), (-1, num_rows - 1), colors.lightgrey),
            ('FONTNAME', (0, num_rows - 1), (-1, num_rows - 1), 'Helvetica-Bold'),
            ('GRID', (0, num_rows - 1), (-1, num_rows - 1), 0.5, colors.black),
        ]))

        # üëâ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —Ü–µ–Ω—Ç—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        x = (width - table_width) / 2  # —ç—Ç–æ –∫–ª—é—á!
        commodity_table.wrapOn(p, width, height)
        commodity_table.drawOn(p, x, y)

    # üì¶ –¢–∞–±–ª–∏—Ü–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
    coll_widths = [370, 100, 100]
    table3_width = sum(coll_widths)

    # ‚úÖ –î–∞–Ω–Ω—ã–µ —á–µ–∫–±–æ–∫—Å–æ–≤
    trailer_loaded = data.get('trailer_loaded', '').strip().lower()
    freight_counted = data.get('freight_counted', '').strip().lower()

    # ‚úÖ –¢–µ–∫—Å—Ç —Å –≥–∞–ª–æ—á–∫–∞–º–∏
    check_trailer_load = (
        f"Trailer Loaded:\n\n"
        f"By Shipper {'‚úì' if trailer_loaded == 'shipper' else ''} ____\n"
        f"By Driver  {'‚úì' if trailer_loaded == 'driver' else ''} ____"
    )

    check_freight_counted = (
        f"Freight Counted:\n\n"
        f"By Shipper {'‚úì' if freight_counted == 'shipper' else ''} ____\n"
        f"By Driver  {'‚úì' if freight_counted == 'driver' else ''} ____"
    )

    # ‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –¥–∞–Ω–Ω—ã–µ
    table3_data = [
        ["", "TRAILER LOADED", "FREIGHT COUNTED"],
        ["", check_trailer_load, check_freight_counted]
    ]

    # üëâ —Å–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É
    load_table = Table(table3_data, colWidths=coll_widths)
    load_table.setStyle(TableStyle([
        ('BACKGROUND', (1, 0), (-1, 0), colors.lightgrey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.black),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 9),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 6),
        ('GRID', (0, 0), (-1, -1), 0.5, colors.black),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('VALIGN', (0, 0), (-1, -1), 'TOP'),
        ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 1), (-1, -1), 9),
    ]))

    # üìå –ü–æ–∑–∏—Ü–∏—è –¥–ª—è –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã (–Ω–∏–∂–µ)
    y2 = y - commodity_table._height - 30  # –æ—Ç—Å—Ç—É–ø –≤–Ω–∏–∑
    x2 = (width - table3_width) / 2

    load_table.wrapOn(p, width, height)
    load_table.drawOn(p, x2, y2)

    # –ü–æ–¥–ø–∏—Å–∏ —Å–ª–µ–≤–∞
    shipper1 = (
        "Shipper Signature/Date\n\n"
        "Shipper: ____________________     Date: _______________"
    )

    carrier1 = (
        "Carrier Signature/Pickup Date\n\n"
        "Carrier: ____________________     Date: _______________"
    )

    signarure2 = (

        "Receiver Signature: ________________________________\n\n"
        "Print Name: ________________________________________\n\n"
        "Exceptions: _________________________________________\n\n"
        "_____________________________________________________\n"
    )

    # üîπ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ–¥ Pickup
    pickup_table = (
        "                Time             Shipper\n"
        "                                     Initials\n"
        "       Appt: _____           _______\n"
        "   Time In: _____           _______\n"
        "Time Out: _____           _______\n"
    )

    delivery_table = (
        "                Time             Receiver\n"
        "                                     Initials\n"
        "       Appt: _____           _______\n"
        "   Time In: _____           _______\n"
        "Time Out: _____           _______\n"
    )
    # –¢–∞–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    signature_data = [
        [shipper1, carrier1],  # 1 —Å—Ç—Ä–æ–∫–∞: 2 –≥—Ä–∞—Ñ—ã + –ø—É—Å—Ç–∞—è

    ]

    # –®–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫ ‚Äî –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø—Ä–∞–≤—å
    col_widths = [285, 285]

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    signature_table = Table(signature_data, colWidths=col_widths)

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∏ —Å—Ç–∏–ª—å
    signature_table.setStyle(TableStyle([
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.black),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica'),
        ('FONTSIZE', (0, 0), (-1, 0), 9),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 6),
        ('GRID', (0, 0), (-1, -1), 0.5, colors.black),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('VALIGN', (0, 0), (-1, -1), 'TOP'),
        ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 1), (-1, -1), 9),
    ]))

    y_sign = y2 - load_table._height + 20  # –ò–ª–∏ –≥–¥–µ —Ç–µ–±–µ –Ω—É–∂–Ω–æ
    x_sign = (width - sum(col_widths)) / 2

    signature_table.wrapOn(p, width, height)
    signature_table.drawOn(p, x_sign, y_sign)

    # –¢–∞–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    time_data = [
        ["PICKUP", "DELIVERY", signarure2],
        ["Shipper Initials", "Receiver Initials", ''],
        [pickup_table, delivery_table, '']
    ]

    col1_widths = [142.5,142.5,285]

    time_table = Table(time_data, colWidths=col1_widths)

    time_table.setStyle(TableStyle([
        ('SPAN', (2, 0), (2, 2)),
        ('BACKGROUND', (0, 0), (1, 0), colors.lightgrey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.black),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica'),
        ('FONTSIZE', (0, 0), (-1, 0), 9),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 6),
        ('GRID', (0, 0), (-1, -1), 0.5, colors.black),

        ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 1), (-1, -1), 9),



    ]))

    y_sign = y2 - signature_table._height - 150  # –ò–ª–∏ –≥–¥–µ —Ç–µ–±–µ –Ω—É–∂–Ω–æ
    x_sign = (width - sum(col1_widths)) / 2

    time_table.wrapOn(p, width, height)
    time_table.drawOn(p, x_sign, y_sign)

    # ‚úÖ –ó–∞–≤–µ—Ä—à–∞–µ–º PDF
    p.showPage()
    p.save()
    buffer.seek(0)

    return HttpResponse(buffer, content_type="application/pdf", headers={
        "Content-Disposition": f"attachment; filename='BOL_{data.get('bolNumber', '00000')}.pdf'"
    })


BOL_COUNTER_FILE = os.path.join(settings.BASE_DIR, 'bol_counter.json')


@csrf_exempt
def get_bol_counters(request):
    print("üìç BOL_COUNTER_FILE path:", BOL_COUNTER_FILE)

    if request.method == 'GET':
        if not os.path.exists(BOL_COUNTER_FILE):
            with open(BOL_COUNTER_FILE, 'w') as f:
                json.dump({"bol": 1000, "load": 2000}, f)


        with open(BOL_COUNTER_FILE, 'r') as f:
            data = json.load(f)
        return JsonResponse(data)

    return JsonResponse({"error": "Invalid request"}, status=400)


@csrf_exempt
def increment_bol_counters(request):
    if request.method == 'POST':
        # ‚úÖ –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞—ë–º –µ–≥–æ —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        if not os.path.exists(BOL_COUNTER_FILE):
            with open(BOL_COUNTER_FILE, 'w') as f:
                json.dump({"bol": 1000, "load": 2000}, f)

        # ‚úÖ –ß–∏—Ç–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º
        with open(BOL_COUNTER_FILE, 'r+') as f:
            data = json.load(f)
            data["bol"] += 1
            data["load"] += 1
            f.seek(0)
            json.dump(data, f, indent=2)
            f.truncate()

        return JsonResponse({"status": "updated", "bol": data["bol"], "load": data["load"]})
    else:
        return JsonResponse({"error": "Invalid request"}, status=400)




# –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ –∫–æ–Ω—Ç–∞–∫—Ç—É
def contact_tasks(request, contact_id):
    contact = get_object_or_404(Contact, id=contact_id)
    tasks = contact.tasks.all()
    return render(request, 'crm/task_list.html', {'contact': contact, 'tasks': tasks})

# –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
def add_task(request, contact_id):
    contact = get_object_or_404(Contact, id=contact_id)

    if request.method == 'POST':
        form = TaskForm(request.POST)
        if form.is_valid():
            task = form.save(commit=False)
            task.contact = contact  # –∏–ª–∏ task.company = contact.company –µ—Å–ª–∏ –º–µ–Ω—è–ª –ª–æ–≥–∏–∫—É
            task.save()
            return redirect('contact_tasks', contact_id=contact.id)
    else:
        form = TaskForm()

    return render(request, 'crm/add_truck.html', {'form': form, 'contact': contact})



from django.views.decorators.csrf import csrf_exempt

@csrf_exempt
def update_stage(request):
    if request.method == "POST":
        try:
            data = json.loads(request.body)
            pipeline_id = data.get('id')
            new_stage = data.get('stage')
            new_order = data.get('order', 0)

            pipeline = PipeLine.objects.get(id=pipeline_id)
            pipeline.stage = new_stage
            pipeline.order = new_order
            pipeline.save()

            return JsonResponse({"status": "success", "stage": new_stage, "order": new_order})
        except Exception as e:
            return JsonResponse({"error": str(e)}, status=500)
    return JsonResponse({"error": "Invalid request"}, status=400)


from django.template.defaulttags import register
@register.filter
def get_item(dictionary, key):
    return dictionary.get(key, [])

def kanban_board(request):
    stages = ["new", "send_email", "meeting", "account", "deal"]
    pipeline = PipeLine.objects.select_related("contact", "contact__company").all()

    grouped = {stage: [] for stage in stages}
    for item in pipeline:
        grouped[item.stage].append(item)

    return render(request, "crm/kanban_board.html", {
        "stages": stages,
        "grouped_pipeline": grouped
    })


@csrf_exempt
def get_clients_grouped(request):
    if request.method == "GET":
        suppliers = Client.objects.filter(client_type='suppliers').values("id", "name")
        buyers = Client.objects.filter(client_type='buyers').values("id", "name")
        return JsonResponse({
            "suppliers": list(suppliers),
            "buyers": list(buyers)
        })

def get_companies_by_type(request):
    suppliers = Company.objects.filter(contacts__company_type="suppliers").distinct()
    buyers = Company.objects.filter(contacts__company_type="buyers").distinct()
    hauler = Company.objects.filter(contacts__company_type="hauler").distinct()

    data = {
        "suppliers": [{"id": c.id, "name": c.name} for c in suppliers],
        "buyers": [{"id": c.id, "name": c.name} for c in buyers],
        "hauler": [{"id": c.id, "name": c.name} for c in hauler],
    }
    return JsonResponse(data)


@csrf_exempt
def mark_shipment_done(request, shipment_id):
    if request.method == "POST":
        try:
            shipment = ScheduledShipment.objects.get(id=shipment_id)
            shipment.is_done = True
            shipment.save()
            return JsonResponse({"status": "done"})
        except ScheduledShipment.DoesNotExist:
            return JsonResponse({"status": "not found"}, status=404)
    return JsonResponse({"status": "invalid method"}, status=405)



def supply_list(request):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∏ –≥–æ–¥
    now = datetime.now()
    current_month = now.month
    current_year = now.year

    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    selected_company_id = request.GET.get('company', '')
    month = request.GET.get('month', '') or str(current_month).zfill(2)
    year = request.GET.get('year', '') or str(current_year)


    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–¥–µ–ª–æ–∫
    deals = Deals.objects.all()

    if selected_company_id:
        deals = deals.filter(Q(buyer__id=int(selected_company_id)))

    if month and year:
        deals = deals.filter(date__month=int(month), date__year=int(year))
    elif month:  # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ç–æ–ª—å–∫–æ –º–µ—Å—è—Ü
        deals = deals.filter(date__month=int(month))
    elif year:  # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ç–æ–ª—å–∫–æ –≥–æ–¥
        deals = deals.filter(date__year=int(year))

    # –ò—Ç–æ–≥–∏
    total_amount_buyer = deals.aggregate(Sum('total_amount'))['total_amount__sum'] or 0
    total_buyer_paid = deals.aggregate(Sum('total_income_loss'))[
                           'total_income_loss__sum'] or 0  # –ò—Ç–æ–≥ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏–±—ã–ª—å –∏–ª–∏ —É–±—ã—Ç–æ–∫)

    # –°–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤ —Ñ–∏–ª—å—Ç—Ä–µ
    companies = Company.objects.filter(contacts__company_type='buyers').distinct()



    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–¥–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    years = Deals.objects.annotate(year=ExtractYear('date')).values_list('year', flat=True).distinct()

    # –°–ø–∏—Å–æ–∫ –º–µ—Å—è—Ü–µ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    months = range(1, 13)  # –ú–µ—Å—è—Ü—ã —Å 1 –ø–æ 12

    # –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —à–∞–±–ª–æ–Ω–∞
    context = {
        'deals': deals,
        'total_amount_buyer': total_amount_buyer,
        'total_buyer_paid': total_buyer_paid,  # –ü–µ—Ä–µ–¥–∞–µ–º total_buyer_paid –≤ —à–∞–±–ª–æ–Ω
        'companies': companies,
        'selected_company_id': int(selected_company_id) if selected_company_id.isdigit() else None,
        'month': month,
        'year': year,
        'years': sorted(years),  # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ª–µ—Ç –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        'months': months,  # –ú–µ—Å—è—Ü—ã –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
    }
    return render(request, 'crm/supply_list.html', context)



def sanitize_filename(name):
    name = name.strip()
    name = name.replace(' ', '_')
    return re.sub(r'[<>:"/\\|?*]', '_', name)

def export_supply_list_pdf(request):
    # ===== –ò–º–ø–æ—Ä—Ç—ã (–ª–æ–∫–∞–ª—å–Ω–æ –≤–Ω—É—Ç—Ä–∏ –≤—å—é—Ö–∏, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç) =====
    from io import BytesIO                                   # –±—É—Ñ–µ—Ä –≤ –ø–∞–º—è—Ç–∏ –ø–æ–¥ PDF
    from datetime import datetime                            # –¥–∞—Ç—ã/–≤—Ä–µ–º—è
    from django.http import HttpResponse                     # HTTP-–æ—Ç–≤–µ—Ç —Å —Ñ–∞–π–ª–æ–º
    from reportlab.lib.pagesizes import A4                   # —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã A4
    from reportlab.pdfgen import canvas                      # –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π PDF canvas
    from reportlab.platypus import Table, TableStyle         # —Ç–∞–±–ª–∏—Ü—ã Platypus (–Ω–æ –±–µ–∑ Story)
    from reportlab.lib import colors                          # —Ü–≤–µ—Ç–∞
    from reportlab.lib.utils import ImageReader              # –∑–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç–∏–Ω–æ–∫
    import os                                                # —Ä–∞–±–æ—Ç–∞ —Å –ø—É—Ç—è–º–∏
    from django.conf import settings                         # BASE_DIR –∏ –ø—Ä–æ—á.
    from django.utils.text import slugify                    # –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞

    # ===== –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤ =====
    selected_company_id = request.GET.get('company', '')     # id –∫–æ–º–ø–∞–Ω–∏–∏-–ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    month = request.GET.get('month', '')                     # –º–µ—Å—è—Ü (—á–∏—Å–ª–æ–º, "08")
    year = request.GET.get('year', '')                       # –≥–æ–¥ ("2025")
    now = datetime.now()                                     # —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞

    # ===== –î–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã =====
    deals = Deals.objects.all()                              # –≤—Å–µ —Å–¥–µ–ª–∫–∏
    if selected_company_id:                                  # —Ñ–∏–ª—å—Ç—Ä –ø–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
        deals = deals.filter(buyer__id=int(selected_company_id))
    if month:                                                # —Ñ–∏–ª—å—Ç—Ä –ø–æ –º–µ—Å—è—Ü—É
        deals = deals.filter(date__month=int(month))
    if year:                                                 # —Ñ–∏–ª—å—Ç—Ä –ø–æ –≥–æ–¥—É
        deals = deals.filter(date__year=int(year))
    deals = deals.order_by('date', 'id')                     # —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —Å—Ç—Ä–æ–∫
    first_deal = deals.first()                               # –ø–µ—Ä–≤–∞—è —Å–¥–µ–ª–∫–∞ (–¥–ª—è –±–ª–æ–∫–∞ Customer)

    # ===== –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–∞–±–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö =====
    data = [["Date", "Grade", "Net (MT)", "Price ($/MT)", "Amount ($)"]]  # –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–ª–æ–Ω–æ–∫
    for d in deals:                                           # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        data.append([
            d.date.strftime("%Y-%m-%d"),                      # –¥–∞—Ç–∞
            str(d.grade),                                     # –≥—Ä–µ–π–¥ (—Å—Ç—Ä–æ–∫–æ–π)
            f"{float(d.shipped_quantity):.3f}",               # net –≤–µ—Å (MT)
            f"{float(d.buyer_price):.2f}",                    # —Ü–µ–Ω–∞ –∑–∞ MT
            f"{float(d.total_amount):.2f}",                   # —Å—É–º–º–∞
        ])

    # ===== –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∏—Ç–æ–≥–∏ =====
    total_net = sum(float(d.shipped_quantity) for d in deals) # –æ–±—â–∏–π –≤–µ—Å
    total_amount = sum(float(d.total_amount) for d in deals)  # –æ–±—â–∏–π –æ–±–æ—Ä–æ—Ç $

    # ===== –ë—É—Ñ–µ—Ä –∏ canvas =====
    buffer = BytesIO()                                        # —Å–æ–∑–¥–∞—ë–º –±—É—Ñ–µ—Ä –≤ –ø–∞–º—è—Ç–∏
    pdf = canvas.Canvas(buffer, pagesize=A4)                  # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º canvas
    PAGE_W, PAGE_H = A4                                       # —à–∏—Ä–∏–Ω–∞/–≤—ã—Å–æ—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    # ===== –ü–æ–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –ø–æ–ª–µ–∑–Ω–∞—è —à–∏—Ä–∏–Ω–∞ =====
    M_L, M_R, M_T, M_B = 30, 30, 40, 40                       # –ª–µ–≤–æ–µ/–ø—Ä–∞–≤–æ–µ/–≤–µ—Ä—Ö/–Ω–∏–∑, –≤ –ø–æ–∏–Ω—Ç–∞—Ö
    usable_w = PAGE_W - M_L - M_R
     # –¥–æ—Å—Ç—É–ø–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞

    # ===== –ü—É—Ç—å –∫ –ª–æ–≥–æ—Ç–∏–ø—É =====
    logo_path = os.path.join(settings.BASE_DIR, 'crm', 'static', 'crm', 'images', 'log.png')

    # ===== –•–µ–ª–ø–µ—Ä: —Ä–∏—Å—É–µ—Ç —à–∞–ø–∫—É + Customer, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∏–∂–Ω—é—é Y =====
    def draw_header():
        y = PAGE_H - 60

        if os.path.exists(logo_path):
            pdf.drawImage(ImageReader(logo_path), M_L, y - 50, width=70, height=70, mask='auto')

        # –∑–∞–≥–æ–ª–æ–≤–æ–∫
        pdf.setFont("Helvetica-Bold", 16)
        pdf.drawCentredString(PAGE_W / 2, y, "Shipment Summary")

        # —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —Å–ø—Ä–∞–≤–∞
        pdf.setFont("Helvetica-Bold", 11)
        pdf.setFillColor(colors.darkblue)
        pdf.drawRightString(PAGE_W - M_R, y, "Local to Global Recycling Inc.")

        pdf.setFont("Helvetica", 9)
        pdf.setFillColor(colors.HexColor("#555555"))
        pdf.drawRightString(PAGE_W - M_R, y - 14, "19090 Lougheed Hwy.")
        pdf.drawRightString(PAGE_W - M_R, y - 26, "Pitt Meadows, BC V3Y 2M6")
        pdf.drawRightString(PAGE_W - M_R, y - 38, "wastepaperbrokers.com")

        # —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
        pdf.setStrokeColor(colors.HexColor("#aaaaaa"))
        pdf.setLineWidth(0.5)
        pdf.line(M_L, y - 50, PAGE_W - M_R, y - 50)
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ Customer
        lines = []                                            # —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫
        if first_deal and first_deal.buyer:                   # –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—å
            lines.append(first_deal.buyer.name)               # –∏–º—è –∫–æ–º–ø–∞–Ω–∏–∏
            contact = first_deal.buyer.contacts.filter(address__isnull=False).first()  # –∫–æ–Ω—Ç–∞–∫—Ç —Å –∞–¥—Ä–µ—Å–æ–º
            if contact and contact.address:                   # –µ—Å–ª–∏ –∞–¥—Ä–µ—Å –µ—Å—Ç—å
                lines.extend([ln.strip() for ln in contact.address.strip().split('\n') if ln.strip()])  # –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –∞–¥—Ä–µ—Å–∞
            else:
                lines.append("Address not available")         # –∑–∞–≥–ª—É—à–∫–∞ –∞–¥—Ä–µ—Å–∞
        else:
            lines.append("Unknown")                           # –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç

        pdf.setFont("Helvetica", 10)                          # –æ–±—ã—á–Ω—ã–π —à—Ä–∏—Ñ—Ç –¥–ª—è Customer —Å—Ç—Ä–æ–∫
        y_lines = PAGE_H - 135                                # —Å—Ç–∞—Ä—Ç–æ–≤–∞—è Y –¥–ª—è —Å—Ç—Ä–æ–∫ –∞–¥—Ä–µ—Å–∞
        for ln in lines:                                      # –≤—ã–≤–æ–¥–∏–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º
            pdf.drawString(M_L + 55, y_lines, ln)             # –ø–µ—á–∞—Ç–∞–µ–º —Å—Ç—Ä–æ–∫—É
            y_lines -= 14                                     # —Å–¥–≤–∏–≥–∞–µ–º –≤–Ω–∏–∑ –Ω–∞ 14pt

        return y_lines - 12                                   # –Ω–µ–±–æ–ª—å—à–æ–π –æ—Ç—Å—Ç—É–ø –∏ –≤–µ—Ä–Ω—É—Ç—å –Ω–∏–∂–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É

    # ===== –•–µ–ª–ø–µ—Ä: –µ–¥–∏–Ω—ã–π —Å—Ç–∏–ª—å —Ç–∞–±–ª–∏—Ü—ã =====
    def table_style():
        return TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),     # —Å–µ—Ä—ã–π —Ñ–æ–Ω –∑–∞–≥–æ–ª–æ–≤–∫–∞
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),# –±–µ–ª—ã–π —Ç–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),            # –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ —Ü–µ–Ω—Ç—Ä—É
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),  # –∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞
            ('FONTSIZE', (0, 0), (-1, 0), 9),                 # —Ä–∞–∑–º–µ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–∞
            ('FONTSIZE', (0, 1), (-1, -1), 9),                # —Ä–∞–∑–º–µ—Ä —è—á–µ–µ–∫
            ('BOTTOMPADDING', (0, 0), (-1, 0), 6),            # –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –æ—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
            ('GRID', (0, 0), (-1, -1), 0.5, colors.black),    # —Å–µ—Ç–∫–∞ 0.5pt
        ])

    # ===== –•–µ–ª–ø–µ—Ä: –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –Ω–µ—Ö–≤–∞—Ç–∫–µ –º–µ—Å—Ç–∞ =====
    def ensure_space_or_new_page(y_cur, need=40):
        if y_cur - need < M_B:                                 # –µ—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–µ—Å—Ç–∞ –≤–Ω–∏–∑
            pdf.showPage()                                     # —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            return draw_header()                               # —Ä–∏—Å—É–µ–º —à–∞–ø–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤—É—é –Ω–∏–∂–Ω—é—é Y
        return y_cur                                           # –∏–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â—É—é Y

    # ===== –•–µ–ª–ø–µ—Ä: –ø–∞–≥–∏–Ω–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã (—Ä–∏—Å—É–µ—Ç –ø–æ—Ä—Ü–∏—è–º–∏) =====
    def draw_table_paginated(all_rows, start_y):
        col_widths = [80, 160, 80, 90, 100]  # –ø–æ–¥–≥–æ–Ω–∏ –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏
        header = all_rows[0]
        rows = all_rows[1:]

        i, y_cur = 0, start_y

        while i < len(rows):
            # –ø–æ–¥–æ–±—Ä–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö –≤–ª–µ–∑–µ—Ç –≤–º–µ—Å—Ç–µ —Å header
            low, high, fit = 1, len(rows) - i, 0
            while low <= high:
                mid = (low + high) // 2
                trial = [header] + rows[i:i + mid]
                t_try = Table(trial, colWidths=col_widths);
                t_try.setStyle(table_style())
                w_try, h_try = t_try.wrap(usable_w, 0)
                if y_cur - h_try >= M_B:
                    fit = mid
                    low = mid + 1
                else:
                    high = mid - 1

            if fit == 0:
                pdf.showPage()
                y_cur = draw_header()
                continue

            # —Ä–∏—Å—É–µ–º –ø–æ—Ä—Ü–∏—é
            chunk = [header] + rows[i:i + fit]
            t = Table(chunk, colWidths=col_widths);
            t.setStyle(table_style())
            w, h = t.wrap(usable_w, 0)
            x = M_L + (usable_w - w) / 2  # —Ü–µ–Ω—Ç—Ä –≤ –ø–æ–ª—è—Ö
            t.drawOn(pdf, x, y_cur - h)
            y_cur -= h + 10
            i += fit

            if i < len(rows) and y_cur < M_B + 60:
                pdf.showPage()
                y_cur = draw_header()

        return y_cur                                           # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∏–∂–Ω—é—é Y –ø–æ—Å–ª–µ —Ç–∞–±–ª–∏—Ü—ã

    # ===== –°—Ç–∞—Ä—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã 1: —Ä–∏—Å—É–µ–º —à–∞–ø–∫—É –∏ —Ç–∞–±–ª–∏—Ü—É —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ =====
    y = draw_header()                                          # —Ä–∏—Å—É–µ–º —à–∞–ø–∫—É, –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é Y
    y = draw_table_paginated(data, y - 10)                     # —Ä–∏—Å—É–µ–º —Ç–∞–±–ª–∏—Ü—É (–Ω–∏–∂–µ —à–∞–ø–∫–∏)

    # ===== –ò—Ç–æ–≥–∏ –ø–æ–¥ —Ç–∞–±–ª–∏—Ü–µ–π (—Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏) =====
    y -= 40
    y = ensure_space_or_new_page(y, need=40)                   # –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Å—Ç–∞ –ø–æ–¥ –±–ª–æ–∫ –∏—Ç–æ–≥–æ–≤
    pdf.setFont("Helvetica-Bold", 12)                          # –∂–∏—Ä–Ω—ã–π 12pt
    pdf.drawString(M_L, y, f"Net Weight: {total_net:.2f} MT")   # –æ–±—â–∏–π Net
    y -= 18                                                    # —Å–¥–≤–∏–≥ –≤–Ω–∏–∑
    pdf.drawString(M_L, y, f"Amount Due: ${total_amount:.2f}")  # –æ–±—â–∏–π Amount
    y -= 24                                                    # –æ—Ç—Å—Ç—É–ø –ø–µ—Ä–µ–¥ —Å–≤–æ–¥–∫–æ–π –ø–æ –≥—Ä–µ–π–¥–∞–º

    # ===== –ò—Ç–æ–≥–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –≥—Ä–µ–π–¥—É (–∞–≥—Ä–µ–≥–∞—Ü–∏—è + –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏) =====
    grade_summary = {}                                         # —Å–ª–æ–≤–∞—Ä—å –∞–≥—Ä–µ–≥–∞—Ç–æ–≤ –ø–æ (grade, price)
    for d in deals:                                            # –ø—Ä–æ—Ö–æ–¥–∏–º —Å–¥–µ–ª–∫–∏
        key = (str(d.grade), float(d.buyer_price))             # –∫–ª—é—á: (–≥—Ä–µ–π–¥, —Ü–µ–Ω–∞)
        if key not in grade_summary:                           # –µ—Å–ª–∏ –∫–ª—é—á –Ω–æ–≤—ã–π
            grade_summary[key] = {"net": 0.0, "amount": 0.0}   # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
        grade_summary[key]["net"] += float(d.shipped_quantity) # —Å—É–º–º–∏—Ä—É–µ–º –≤–µ—Å
        grade_summary[key]["amount"] += float(d.total_amount)  # —Å—É–º–º–∏—Ä—É–µ–º —Å—É–º–º—É $

    items = sorted(grade_summary.items(), key=lambda kv: (kv[0][0], kv[0][1]))  # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é/—Ü–µ–Ω–µ
    pdf.setFont("Helvetica", 10)                                # –æ–±—ã—á–Ω—ã–π 10pt
    for (grade, price), vals in items:                          # –ø—Ä–æ–±–µ–≥–∞–µ–º –∞–≥—Ä–µ–≥–∞—Ç—ã
        line = f"{grade} (${price:.2f}) ‚Äì {vals['net']:.2f} MT ‚Äì ${vals['amount']:.2f}"  # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É
        y = ensure_space_or_new_page(y, need=16)                # –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Å—Ç–æ –ø–æ–¥ —Å—Ç—Ä–æ–∫—É
        pdf.drawString(M_L, y, line)                            # –ø–µ—á–∞—Ç–∞–µ–º —Å—Ç—Ä–æ–∫—É
        y -= 14                                                 # —à–∞–≥ –≤–Ω–∏–∑ –ø–æ–¥ —Å–ª–µ–¥—É—é—â—É—é

    # ===== –ò–º—è —Ñ–∞–π–ª–∞ =====
    raw_name = first_deal.buyer.name if first_deal and first_deal.buyer else "Unknown"   # –∏–º—è –∫–æ–º–ø–∞–Ω–∏–∏
    safe_name = slugify(raw_name)                                 # –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è
    month_str = datetime.strptime(month, "%m").strftime("%b") if month else now.strftime("%b")  # "Aug"
    year_str = year if year else now.strftime("%Y")               # "2025"
    filename = f"L2G_{safe_name}_Supply_List_{month_str}_{year_str}.pdf"  # —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞

    # ===== –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ PDF –∏ –æ—Ç–≤–µ—Ç =====
    pdf.save()                                                    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º PDF (–û–î–ò–ù —Ä–∞–∑!)
    buffer.seek(0)                                                # —Å—Ç–∞–≤–∏–º –∫—É—Ä—Å–æ—Ä –≤ –Ω–∞—á–∞–ª–æ –±—É—Ñ–µ—Ä–∞
    response = HttpResponse(buffer, content_type='application/pdf')  # –≥–æ—Ç–æ–≤–∏–º –æ—Ç–≤–µ—Ç
    response['Content-Disposition'] = f'attachment; filename="{filename}"'  # –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    return response


from datetime import timedelta, date
from crm.models import ScheduledShipment


def generate_recurring_shipments():
    print("üöÄ –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–≤—Ç–æ—Ä–æ–≤ –ó–ê–ü–£–©–ï–ù–ê")

    today = date.today()
    end_date = today + timedelta(weeks=52)  # üîÅ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞ –≥–æ–¥ –≤–ø–µ—Ä—ë–¥

    # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω—ã
    recurring_shipments = ScheduledShipment.objects.filter(is_recurring=True, is_done=False)
    print(f"üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –æ—Ç–≥—Ä—É–∑–æ–∫ –Ω–∞ {today} ({len(recurring_shipments)} —à–∞–±–ª–æ–Ω–æ–≤)")

    for shipment in recurring_shipments:
        current_date = shipment.date

        while True:
            # üóì –í—ã—á–∏—Å–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é –¥–∞—Ç—É
            if shipment.recurrence_type == 'weekly':
                current_date += timedelta(weeks=1)
            elif shipment.recurrence_type == 'biweekly':
                current_date += timedelta(weeks=2)
            elif shipment.recurrence_type == 'monthly':
                try:
                    # –ü—Ä–æ–±—É–µ–º —Å–¥–≤–∏–Ω—É—Ç—å –º–µ—Å—è—Ü
                    next_month = current_date.month + 1
                    year = current_date.year + (next_month - 1) // 12
                    month = (next_month - 1) % 12 + 1
                    current_date = current_date.replace(year=year, month=month)
                except ValueError:
                    print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –¥–ª—è {shipment}")
                    break

            if current_date > end_date:
                break

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –æ—Ç–≥—Ä—É–∑–∫–∞
            exists = ScheduledShipment.objects.filter(
                supplier=shipment.supplier,
                buyer=shipment.buyer,
                date=current_date,
                time=shipment.time,
                grade=shipment.grade
            ).exists()

            if exists:
                print(f"‚è© –£–∂–µ –µ—Å—Ç—å: {current_date} ‚Äî –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
                continue

            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –æ—Ç–≥—Ä—É–∑–∫—É
            ScheduledShipment.objects.create(
                supplier=shipment.supplier,
                buyer=shipment.buyer,
                date=current_date,
                time=shipment.time,
                grade=shipment.grade,
                is_recurring=False  # üìå –ü–æ–≤—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω ‚Äî —ç—Ç–æ –Ω–µ —à–∞–±–ª–æ–Ω
            )

            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –æ—Ç–≥—Ä—É–∑–∫–∞ –Ω–∞ {current_date} –¥–ª—è {shipment.supplier} ‚Üí {shipment.buyer} ({shipment.grade})")


def ai_dashboard(request):
    # –í—ã–±–∏—Ä–∞–µ–º —É–±—ã—Ç–æ—á–Ω—ã–µ —Å–¥–µ–ª–∫–∏
    problem_deals = Deals.objects.filter(total_income_loss__lt=0)
    deal_issues_count = problem_deals.count()

    return render(request, 'crm/ai_dashboard/ai_dashboard.html', {
        'deal_issues_count': deal_issues_count
    })

# views.py
from crm.ai_dashboard.deal_recommendations import analyze_deals

def deal_recommendations(request):
    recommendations = analyze_deals()
    return render(request, 'crm/ai_dashboard/deal_recommendations.html', {
        'recommendations': recommendations
    })

from crm.ai_dashboard.shipment_predictor import predict_shipments

def shipment_predictions(request):
    predictions = predict_shipments()
    return render(request, 'crm/ai_dashboard/shipment_predictor.html', {
        'predictions': predictions
    })

from crm.ai_dashboard.client_monitor import find_inactive_clients,INACTIVITY_DAYS_THRESHOLD

def client_monitor_view(request):
    inactive_clients = find_inactive_clients()
    return render(request, 'crm/ai_dashboard/client_monitor.html', {
        'inactive_clients': inactive_clients,
        'threshold': INACTIVITY_DAYS_THRESHOLD
    })

from crm.ai_dashboard.email_generator import generate_reminder_email

def generate_email_view(request, company_id):
    from crm.models import Company
    from crm.ai_dashboard.email_generator import generate_reminder_email

    company = Company.objects.get(id=company_id)
    email_text = generate_reminder_email(company.name)

    return render(request, 'crm/ai_dashboard/generated_email.html', {
        'company': company,
        'email_text': email_text
    })

from crm.ai_dashboard.insight_engine import get_pie_chart_data
from django.http import JsonResponse

def ai_pie_stats(request):
    data = get_pie_chart_data()
    return JsonResponse(data)

from crm.models import Deals
from django.db.models import Sum

def get_problem_suppliers():
    suppliers = (
        Deals.objects
        .filter(total_income_loss__lt=0, supplier__isnull=False)
        .values('supplier__name')
        .annotate(total_loss=Sum('total_income_loss'))
        .order_by('total_loss')
    )

    max_loss = abs(min(s['total_loss'] for s in suppliers)) or 1  # –∑–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 0

    result = []
    for s in suppliers:
        loss = abs(s['total_loss'])
        percent = int((loss / max_loss) * 100)
        result.append({
            'name': s['supplier__name'],
            'loss': round(loss, 2),
            'percent': percent
        })

    return result


from django.utils.timezone import now

def get_supplier_monthly_stats(request):
    current_year = now().year

    # –ë–µ—Ä—ë–º —Å–¥–µ–ª–∫–∏ –ø–æ –≥–æ–¥—É, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ supplier –∏ –º–µ—Å—è—Ü—É
    data = (
        Deals.objects.filter(
            date__year=current_year,
            supplier__isnull=False
        )
        .values('supplier__name', 'date__month')
        .annotate(total=Sum('total_income_loss'))
        .order_by('supplier__name', 'date__month')
    )

    # –°—Ç—Ä–æ–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É: {supplier_name: [month1, ..., month12]}
    result = {}
    for entry in data:
        name = entry['supplier__name']
        month = entry['date__month']
        total = round(entry['total'], 2)

        if name not in result:
            result[name] = [0] * 12

        result[name][month - 1] = total

    return JsonResponse(result)

def get_buyer_supplier_map(request):
    from crm.models import Deals
    result = {}
    qs = Deals.objects.filter(buyer__isnull=False, supplier__isnull=False).values("buyer__name", "supplier__name").distinct()

    for row in qs:
        buyer = row["buyer__name"]
        supplier = row["supplier__name"]
        result.setdefault(buyer, []).append(supplier)

    return JsonResponse(result)



from crm.ai_dashboard.insight_engine import (
    get_top_clients,
    get_worst_deals,
    get_top_suppliers,
    get_problem_suppliers,
    get_clients_with_drop,
    get_supplier_monthly_profit_and_tonnage,
    get_pie_chart_data,
    compute_kpi,
    monthly_trends_data,
)
from django.views.decorators.http import require_GET
from collections import defaultdict

def insight_dashboard(request):
    # # –æ—Å–Ω–æ–≤–Ω—ã–µ –±–ª–æ–∫–∏ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
    top_clients = get_top_clients()                         # —Ç–æ–ø –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –ø—Ä–∏–±—ã–ª–∏
    worst_deals = get_worst_deals()                         # —Ö—É–¥—à–∏–µ —Å–¥–µ–ª–∫–∏ —ç—Ç–æ–≥–æ –º–µ—Å—è—Ü–∞
    top_suppliers = get_top_suppliers()                     # —Ç–æ–ø –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –ø–æ –ø—Ä–∏–±—ã–ª–∏
    problem_suppliers = get_problem_suppliers()             # –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏ (–º–µ—Å—è—Ü)
    dropped_clients = get_clients_with_drop()               # –∫–ª–∏–µ–Ω—Ç—ã —Å –ø–∞–¥–µ–Ω–∏–µ–º –æ–±–æ—Ä–æ—Ç–∞
    kpi = compute_kpi()



    # # —Ä–µ–Ω–¥–µ—Ä–∏–º HTML, –æ—Å—Ç–∞–ª—å–Ω–æ–µ —Ñ—Ä–æ–Ω—Ç –ø–æ–¥—Ç—è–Ω–µ—Ç —á–µ—Ä–µ–∑ fetch()
    return render(request, 'crm/ai_dashboard/insights.html', {
        'top_clients': top_clients,
        'worst_deals': worst_deals,
        'top_suppliers': top_suppliers,
        'problem_suppliers': problem_suppliers,
        'dropped_clients': dropped_clients,
        'kpi': kpi,

    })


@require_GET
def supplier_monthly_api(request):
    # # –æ—Ç–¥–∞—ë–º –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É: { "Supplier A": {"profit":[..12..], "tonnage":[..12..]}, ... }
    data = get_supplier_monthly_profit_and_tonnage()        # —Å—á–∏—Ç–∞–µ–º –≤ engine
    return JsonResponse(data, safe=True)                    # safe=True —Ç.–∫. dict


@require_GET
def buyer_suppliers_api(request):
    # # —Å—Ç—Ä–æ–∏–º –º—ç–ø–ø–∏–Ω–≥: –ø–æ–∫—É–ø–∞—Ç–µ–ª—å -> —Å–ø–∏—Å–æ–∫ –µ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ (–ø–æ —Ñ–∞–∫—Ç—É —Å–¥–µ–ª–æ–∫)
    mapping = defaultdict(set)                              # set —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã

    qs = (Deals.objects
          .filter(buyer__isnull=False, supplier__isnull=False)   # –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã –∑–∞–¥–∞–Ω—ã
          .values('buyer__name', 'supplier__name')               # –±–µ—Ä—ë–º –∏–º–µ–Ω–∞
          )

    for row in qs:
        buyer = row['buyer__name'] or 'Unknown'             # –ø–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ –æ—Ç NULL
        supplier = row['supplier__name'] or 'Unknown'       # –ø–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ –æ—Ç NULL
        mapping[buyer].add(supplier)                        # –¥–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—å

    # # –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º set -> list –¥–ª—è JSON
    data = {buyer: sorted(list(suppliers)) for buyer, suppliers in mapping.items()}
    return JsonResponse(data, safe=True)


@require_GET
def pie_stats_api(request):
    # # –æ—Ç–¥–∞—ë–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∏—Ä–æ–≥–æ–≤: {"suppliers": {...}, "buyers": {...}}
    stats = get_pie_chart_data()                            # —Å—á–∏—Ç–∞–µ—Ç engine
    return JsonResponse(stats, safe=True)

@require_GET
def monthly_trends_api(request):
    return JsonResponse(monthly_trends_data(), safe=True)



from django.views.decorators.http import require_http_methods
import math
@require_http_methods(["GET", "POST"])
def add_truck(request, contact_id):
    contact = get_object_or_404(Contact, id=contact_id)
    company = contact.company

    if contact.company_type != "hauler":
        return HttpResponse("‚ùå Only hauler contacts can have trucks", status=400)

    if request.method == "POST":
        max_tons = float(request.POST.get("max_tons", 0))      # –º–∞–∫—Å–∏–º—É–º —Ç–æ–Ω–Ω
        base_cost = float(request.POST.get("base_cost", 0))    # –±–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞
        max_spots = int(request.POST.get('max_spots', 0))

        # üîÅ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å—á—ë—Ç max_bales:
        if max_tons > 0 and max_spots > 0:
            max_bales = max_spots  # üí° —Ç–µ–ø–µ—Ä—å –Ω–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º, –∞ –≤–≤–æ–¥–∏–º –Ω–∞–ø—Ä—è–º—É—é
        else:
            max_bales = 0

        # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º
        TruckProfile.objects.create(
            company=company,
            max_bales=max_bales,
            max_tons=max_tons,
            max_spots=max_spots,
            base_cost=base_cost
        )

        return redirect("view_contact", id=contact_id)

    return render(request, "crm/add_truck.html", {"contact": contact})


def delete_truck(request, id):
    truck = get_object_or_404(TruckProfile, id=id)

    # üß© –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ–Ω –µ—Å—Ç—å)
    contact = Contact.objects.filter(company=truck.company).first()
    if not contact:
        return redirect('contacts_list')  # fallback, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫

    truck.delete()
    return redirect('view_contact', id=contact.id)