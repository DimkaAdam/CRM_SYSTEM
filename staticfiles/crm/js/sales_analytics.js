document.addEventListener("DOMContentLoaded", function () {                         // ‚è≥ –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫—É DOM
  // =========================
  // –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
  // =========================
  const TOP_SUPPLIERS = 12;                                                        // üî¢ –°–∫–æ–ª—å–∫–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –±–∞—Ä-—á–∞—Ä—Ç–µ

  const fmtMoney = (v) => {                                                        // üíµ –§–æ—Ä–º–∞—Ç –≤–∞–ª—é—Ç—ã —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
    const n = Number(v ?? 0);
    return n.toLocaleString(undefined, { style: "currency", currency: "USD", maximumFractionDigits: 2 });
  };

  const fmtNumber = (v) => Number(v ?? 0).toLocaleString();                        // üî¢ –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –¥–ª—è —á–∏—Å–µ–ª

  const hexWithAlpha = (hex, alpha = 0.2) => {                                     // üé® –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –∫ HEX
    if (hex.startsWith("#") && hex.length === 7) {
      const a = Math.round(alpha * 255).toString(16).padStart(2, "0");
      return `${hex}${a}`;
    }
    return hex;                                                                    // –ï—Å–ª–∏ –ø—Ä–∏—à—ë–ª –Ω–µ HEX ‚Äî –≤–µ—Ä–Ω—ë–º –∫–∞–∫ –µ—Å—Ç—å
  };

  const metricColors = {                                                           // üéØ –¶–≤–µ—Ç–∞ –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º (–µ–¥–∏–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å)
    profit: "#4CAF50",
    pallets: "#2196F3",
    hauler: "#FF9800",
    suppliers: "#9C27B0",
    total_tonnage: "#E91E63",
    occ11_tonnage: "#3F51B5",
    plastic_tonnage: "#00BCD4",
    mixed_tonnage: "#CDDC39",
    sales: "#F44336"
  };

  // =========================
  // –ë–ê–†-–ß–ê–†–¢: –î–û–•–û–î/–£–ë–´–¢–û–ö –ü–û –ü–û–°–¢–ê–í–©–ò–ö–ê–ú
  // =========================
  if (document.getElementById("salesChart")) {                                     // ‚úÖ –ï—Å—Ç—å –ª–∏ canvas –¥–ª—è –±–∞—Ä-—á–∞—Ä—Ç–∞
    const suppliersIncome = window.suppliersIncome;                                 // üîó –û–∂–∏–¥–∞–µ–º –æ–±—ä–µ–∫—Ç: { "Supplier A": 1234, ... }

    if (!suppliersIncome || Object.keys(suppliersIncome).length === 0) {           // üõë –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö
      console.error("No data available for sales analytics");
      alert("No data available for sales analytics.");
    } else {
      // üëâ –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é –∏ –±–µ—Ä—ë–º —Ç–æ–ø-N
      const sortedEntries = Object.entries(suppliersIncome)                         // [[name, value], ...]
        .sort((a, b) => b[1] - a[1])                                               // –ü–æ —É–±—ã–≤–∞–Ω–∏—é –¥–æ—Ö–æ–¥–∞
        .slice(0, TOP_SUPPLIERS);                                                  // –ë–µ—Ä—ë–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ

      const salesLabels = sortedEntries.map(([name]) => name);                     // üè∑Ô∏è –ú–µ—Ç–∫–∏ (–∏–º–µ–Ω–∞)
      const salesData = sortedEntries.map(([, val]) => Number(val));               // üìä –ó–Ω–∞—á–µ–Ω–∏—è (—á–∏—Å–ª–∞)

      const salesCtx = document.getElementById("salesChart").getContext("2d");     // üé® –ö–æ–Ω—Ç–µ–∫—Å—Ç canvas

      const getBarFill = (val, ctx) => {                                           // üåà –ì—Ä–∞–¥–∏–µ–Ω—Ç —Å—Ç–æ–ª–±—Ü–∞ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é
        const g = ctx.createLinearGradient(0, 0, 0, 300);                          // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
        if (val < 0) {                                                             // üîª –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è ‚Äî –∫—Ä–∞—Å–Ω—ã–µ
          g.addColorStop(0, "#FF5252");
          g.addColorStop(1, "#C62828");
        } else if (val >= 3500) {                                                  // ü•á –ë–æ–ª—å—à–æ–π –¥–æ—Ö–æ–¥ ‚Äî —Ç—ë–ø–ª—ã–π –∂—ë–ª—Ç—ã–π
          g.addColorStop(0, "#FFF176");
          g.addColorStop(1, "#FBC02D");
        } else if (val >= 2000) {                                                  // üü£ –°—Ä–µ–¥–Ω–∏–π ‚Äî —Ä–æ–∑–æ–≤–æ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
          g.addColorStop(0, "#FF80AB");
          g.addColorStop(1, "#AB47BC");
        } else {                                                                   // üîµ –ú–∞–ª—ã–π ‚Äî —Ñ–∏–æ–ª–µ—Ç–æ–≤–æ-—Å–∏–Ω–∏–π
          g.addColorStop(0, "#9575CD");
          g.addColorStop(1, "#5E35B1");
        }
        return g;
      };

      const barFills = salesData.map(v => getBarFill(v, salesCtx));                // üé® –ó–∞–ø–æ–ª–Ω—è–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–∞—Ä–∞

      // –ü–æ–¥–±–∏—Ä–∞–µ–º –º–∞–∫—Å–∏–º—É–º –æ—Å–∏ Y —Å –∑–∞–ø–∞—Å–æ–º
      const maxAbs = Math.max(...salesData.map(v => Math.abs(v))) || 1;            // –ú–∞–∫—Å–∏–º—É–º –ø–æ –º–æ–¥—É–ª—é
      const suggestedMax = Math.ceil(maxAbs * 1.2 / 100) * 100;                    // –û–∫—Ä—É–≥–ª–∏–º –≤–≤–µ—Ä—Ö —Å 20% –∑–∞–ø–∞—Å–æ–º

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫
      new Chart(salesCtx, {
        type: "bar",
        data: {
          labels: salesLabels,                                                      // –ò–º–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
          datasets: [{
            label: "Income/Loss",                                                   // –õ–µ–π–±–ª –Ω–∞–±–æ—Ä–∞
            data: salesData,                                                        // –ó–Ω–∞—á–µ–Ω–∏—è
            backgroundColor: barFills,                                              // –ì—Ä–∞–¥–∏–µ–Ω—Ç—ã
            borderColor: barFills,                                                  // –ì—Ä–∞–Ω–∏—Ü—ã —Ç–µ–º–∏ –∂–µ —Ü–≤–µ—Ç–∞–º–∏
            borderWidth: 1,                                                         // –¢–æ–ª—â–∏–Ω–∞ –≥—Ä–∞–Ω–∏—Ü—ã
            borderRadius: 6,                                                        // –°–∫—Ä—É–≥–ª–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤
            barThickness: "flex"                                                    // –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —à–∏—Ä–∏–Ω–∞
          }]
        },
        options: {
          responsive: true,                                                         // –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å
          maintainAspectRatio: false,                                               // –°–≤–æ–±–æ–¥–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
          plugins: {
            legend: { display: false },                                             // –õ–µ–≥–µ–Ω–¥–∞ –Ω–µ –Ω—É–∂–Ω–∞
            tooltip: { callbacks: { label: ctx => `${fmtMoney(ctx.parsed.y)}` } }   // –ü–æ–¥—Å–∫–∞–∑–∫–∏ –≤ $
          },
          scales: {
            x: {
              ticks: { autoSkip: false, maxRotation: 45, minRotation: 0 }           // –ß–∏—Ç–∞–±–µ–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∏
            },
            y: {
              beginAtZero: true,                                                    // –ù–∞—á–∏–Ω–∞–µ–º —Å –Ω—É–ª—è
              suggestedMax,                                                         // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –º–∞–∫—Å–∏–º—É–º
              ticks: { callback: (v) => fmtMoney(v) },                              // –§–æ—Ä–º–∞—Ç –æ—Å–∏ Y –≤ $
              grid: { drawBorder: false }                                           // –ê–∫–∫—É—Ä–∞—Ç–Ω–∞—è —Å–µ—Ç–∫–∞
            }
          }
        }
      });
    }
  }

  // =========================
  // –õ–ê–ô–ù-–ß–ê–†–¢: –ú–ï–°–Ø–ß–ù–´–ï –ú–ï–¢–†–ò–ö–ò (¬´—á–µ—Ä–≤—è—á–æ–∫¬ª)
  // =========================
  if (document.getElementById("monthlyWormChart")) {                               // ‚úÖ –ï—Å—Ç—å –ª–∏ canvas –¥–ª—è –ª–∏–Ω–µ–π–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
    const chartData = window.chartData || {};                                      // üîó –û–∂–∏–¥–∞–µ–º { months: [...], profit: [...], ... }
    const months = Array.isArray(chartData.months) ? chartData.months : [];        // üìÜ –ú–µ—Å—è—Ü—ã
    const metric = "profit";                                                        // üìç –ú–µ—Ç—Ä–∏–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    if (months.length === 0 || !Array.isArray(chartData[metric])) {                // üõë –ù–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      console.warn("No monthly chart data");
      return;
    }

    const monthlyCtx = document.getElementById("monthlyWormChart").getContext("2d");// üé® –ö–æ–Ω—Ç–µ–∫—Å—Ç canvas

    const baseColor = metricColors[metric] || "#888";                               // üéØ –ë–∞–∑–æ–≤—ã–π —Ü–≤–µ—Ç –ª–∏–Ω–∏–∏
    const grad = monthlyCtx.createLinearGradient(0, 0, 0, 240);                     // üåà –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
    grad.addColorStop(0, hexWithAlpha(baseColor, 0.35));                            // –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –≤–µ—Ä—Ö
    grad.addColorStop(1, hexWithAlpha(baseColor, 0.00));                            // –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π –Ω–∏–∑

    const dataPairs = months.map((m, i) => ({ x: m, y: Number(chartData[metric][i] ?? 0) })); // üìä –ü–∞—Ä—ã (–º–µ—Å—è—Ü, –∑–Ω–∞—á–µ–Ω–∏–µ)

    // –°–æ–∑–¥–∞—ë–º –≥—Ä–∞—Ñ–∏–∫
    window.monthlyChart = new Chart(monthlyCtx, {
      type: "line",
      data: {
        labels: months.map(String),                                                 // –ü–æ–¥–ø–∏—Å–∏ –æ—Å–∏ X
        datasets: [{
          label: "PROFIT",                                                          // –õ–µ–π–±–ª –Ω–∞–±–æ—Ä–∞
          data: dataPairs.map(p => p.y),                                            // –ú–∞—Å—Å–∏–≤ –∑–Ω–∞—á–µ–Ω–∏–π
          borderColor: baseColor,                                                   // –¶–≤–µ—Ç –ª–∏–Ω–∏–∏
          backgroundColor: grad,                                                    // –ì—Ä–∞–¥–∏–µ–Ω—Ç –ø–æ–¥ –ª–∏–Ω–∏–µ–π
          fill: true,                                                               // –í–∫–ª—é—á–∞–µ–º –∑–∞–ª–∏–≤–∫—É
          borderWidth: 3,                                                           // –¢–æ–ª—â–∏–Ω–∞ –ª–∏–Ω–∏–∏
          pointRadius: 0,                                                           // –¢–æ—á–∫–∏ —Å–∫—Ä—ã—Ç—ã
          tension: 0.35                                                             // –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ (¬´—á–µ—Ä–≤—è—á–æ–∫¬ª)
        }]
      },
      options: {
        responsive: true,                                                           // –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å
        maintainAspectRatio: false,                                                 // –°–≤–æ–±–æ–¥–Ω–∞—è –≤—ã—Å–æ—Ç–∞
        plugins: {
          legend: { display: false },                                               // –õ–µ–≥–µ–Ω–¥—É —É–±–∏—Ä–∞–µ–º
          tooltip: { callbacks: { label: ctx => fmtMoney(ctx.parsed.y) } }          // –ü–æ–¥—Å–∫–∞–∑–∫–∏ –≤ $
        },
        scales: {
          x: { grid: { display: false } },                                          // –ë–µ–∑ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∫–∏
          y: {
            beginAtZero: true,                                                      // –û—Ç –Ω—É–ª—è
            ticks: { callback: (v) => fmtMoney(v) },                                // –§–æ—Ä–º–∞—Ç –æ—Å–∏ Y
            grid: { drawBorder: false }                                             // –ê–∫–∫—É—Ä–∞—Ç–Ω–∞—è —Å–µ—Ç–∫–∞
          }
        }
      }
    });

    // ========= –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ =========
    window.updateMonthlyChart = function (metricKey) {                              // üîÑ –°–º–µ–Ω–∞ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ –∫–Ω–æ–ø–∫–∞–º/–¥—Ä–æ–ø–¥–∞—É–Ω—É
      if (!window.monthlyChart || !chartData[metricKey]) return;                    // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –≤—ã—Ö–æ–¥–∏–º

      const color = metricColors[metricKey] || "#666";                              // –ù–æ–≤—ã–π —Ü–≤–µ—Ç
      const values = months.map((_, i) => Number(chartData[metricKey][i] ?? 0));    // –ù–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      const grad2 = monthlyCtx.createLinearGradient(0, 0, 0, 240);                  // –ù–æ–≤—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
      grad2.addColorStop(0, hexWithAlpha(color, 0.35));                             // –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –≤–µ—Ä—Ö
      grad2.addColorStop(1, hexWithAlpha(color, 0.00));                             // –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π –Ω–∏–∑

      const ds = window.monthlyChart.data.datasets[0];                              // –î–∞—Ç–∞—Å–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∞
      ds.data = values;                                                             // –ü–æ–¥–º–µ–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
      ds.label = metricKey.replace(/_/g, " ").toUpperCase();                        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–µ–π–±–ª
      ds.borderColor = color;                                                       // –¶–≤–µ—Ç –ª–∏–Ω–∏–∏
      ds.backgroundColor = grad2;                                                   // –ó–∞–ª–∏–≤–∫–∞

      window.monthlyChart.update();                                                 // –†–µ—Ä–µ–Ω–¥–µ—Ä

      const last = values.length ? values[values.length - 1] : 0;                   // –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–ø–æ—Å–ª–µ–¥–Ω–µ–µ)
      const currentDisplay = document.getElementById("currentMetricDisplay");        // DOM-—ç–ª–µ–º–µ–Ω—Ç —Å —Ç–µ–∫—É—â–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
      if (currentDisplay) {                                                         // –ï—Å–ª–∏ –µ—Å—Ç—å, –æ–±–Ω–æ–≤–∏–º
        currentDisplay.textContent = fmtMoney(last);
        currentDisplay.style.backgroundColor = hexWithAlpha(color, 0.12);
        currentDisplay.style.color = color;
      }
    };
  }
});
